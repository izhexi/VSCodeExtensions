{
    "Stateless Widget": {
        "prefix": "stlss",
        "body": [
            "class ${1:name} extends StatelessWidget {",
            "  @override",
            "  Widget build(BuildContext context) {",
            "    return Container(",
            "      child: ${2:child},",
            "    );",
            "  }",
            "}"
        ],
        "description": "Create a Stateless widget"
    },
    "Stateful Widget": {
        "prefix": "stful",
        "body": [
            "class ${1:name} extends StatefulWidget {",
            "  _${1:WidgetName}State createState() => _${1:WidgetName}State();",
            "}\n",
            "class _${1:index}State extends State<${1:index}> {",
            "  @override",
            "  Widget build(BuildContext context) {",
            "    return Container(",
            "       child: ${2:child},",
            "    );",
            "  }",
            "}"
        ],
        "description": "Create a Stateful widget"
    },
    "Build Method": {
        "prefix": "bld",
        "body": [
            "@override",
            "Widget build(BuildContext context) {",
            "  return ${0:};",
            "}"
        ],
        "description": "Describes the part of the user interface represented by this widget."
    },
    "Custom Painter ": {
        "prefix": "cp",
        "body": [
            "class ${0:name}Painter extends CustomPainter {",
            "",
            "  @override",
            "  void paint(Canvas canvas, Size size) {",
            "  }",
            "",
            "  @override",
            "  bool shouldRepaint(${0:name}Painter oldDelegate) => false;",
            "",
            "  @override",
            "  bool shouldRebuildSemantics(${0:name}Painter oldDelegate) => false;",
            "}"
        ],
        "description": "Used for creating custom paint"
    },
    "Custom Clipper ": {
        "prefix": "cc",
        "body": [
            "class ${0:name}Clipper extends CustomClipper<Path> {",
            "",
            "  @override",
            "  Path getClip(Size size) {",
            "  }",
            "",
            "  @override",
            "  bool shouldReclip(CustomClipper<Path> oldClipper) => false;",
            "}"
        ],
        "description": "Used for creating custom shapes"
    },
    "InitState ": {
        "prefix": "init",
        "body": [
            "void initState() { ",
            "  super.initState();",
            "  ${0:}",
            "}"
        ],
        "description": "Called when this object is inserted into the tree. The framework will call this method exactly once for each State object it creates."
    },
    "Dispose": {
        "prefix": "dis",
        "body": [
            "@override",
            "void dispose() { ",
            "  ${0:}",
            "  super.dispose();",
            "}"
        ],
        "description": "Called when this object is removed from the tree permanently. The framework calls this method when this State object will never build again."
    },
    "Reassemble": {
        "prefix": "rasm",
        "body": [
            "@override",
            "void reassemble(){",
            "  super.reassemble();",
            "  ${0:}",
            "}"
        ],
        "description": "Called whenever the application is reassembled during debugging, for example during hot reload."
    },
    "didChangeDependencies": {
        "prefix": "dcd",
        "body": [
            "@override",
            "void didChangeDependencies() {",
            "  super.didChangeDependencies();",
            "  ${0:}",
            "}"
        ],
        "description": "Called when a dependency of this State object changes"
    },
    "didUpdateWidget": {
        "prefix": "duw",
        "body": [
            "@override",
            "void didUpdateWidget (${1:Type} ${2:oldWidget}) {",
            "  super.didUpdateWidget(${2:oldWidget});",
            "  ${0:}",
            "}"
        ],
        "description": "Called whenever the widget configuration changes."
    },
    "ListView.Builder": {
        "prefix": "lsb",
        "body": [
            "ListView.builder(",
            "  itemCount: ${1:1},",
            "  itemBuilder: (BuildContext context, int index) {",
            "  return ${2:};",
            " },",
            "),"
        ],
        "description": "Creates a scrollable, linear array of widgets that are created on demand.Providing a non-null `itemCount` improves the ability of the [ListView] to estimate the maximum scroll extent."
    },
    "Custom Scroll View": {
        "prefix": "csv",
        "body": [
            "CustomScrollView(",
            "  slivers: <Widget>[",
            "  ${0:}",
            "  ],",
            "),"
        ],
        "description": "Creates a `ScrollView` that creates custom scroll effects using slivers. If the `primary` argument is true, the `controller` must be null."
    },
    "Stream Builder": {
        "prefix": "stb",
        "body": [
            "StreamBuilder(",
            "  stream: ${1:stream} ,",
            "  initialData: ${2:initialData} ,",
            "  builder: (BuildContext context, AsyncSnapshot snapshot){",
            "    return Container(",
            "      child: ${3:child},",
            "    );",
            "  },",
            "),"
        ],
        "description": "Creates a new `StreamBuilder` that builds itself based on the latest snapshot of interaction with the specified `stream`"
    },
    "Animated Builder": {
        "prefix": "abldr",
        "body": [
            "AnimatedBuilder(",
            "  animation: ${1:animation},",
            "  child: ${2:child},",
            "  builder: (BuildContext context, Widget child) {",
            "    return ${3:};",
            "  },",
            "),"
        ],
        "description": "Creates an Animated Builder. The widget specified to `child` is passed to the `builder` "
    },
    "Stateful Builder": {
        "prefix": "stflbldr",
        "body": [
            "StatefulBuilder(",
            "  builder: (BuildContext context, setState) {",
            "    return ${0:};",
            "  },",
            "),"
        ],
        "description": "Creates a widget that both has state and delegates its build to a callback. Useful for rebuilding specific sections of the widget tree."
    },
    "Oriantation Builder": {
        "prefix": "oribldr",
        "body": [
            "OrientationBuilder(",
            "  builder: (BuildContext context, Orientation orientation) {",
            "    return Container(",
            "      child: ${3:child},",
            "    );",
            "  },",
            "),"
        ],
        "description": "Creates a builder which allows for the orientation of the device to be specified and referenced"
    },
    "Layout Builder": {
        "prefix": "laybldr",
        "body": [
            "LayoutBuilder(",
            "  builder: (BuildContext context, BoxConstraints constraints) {",
            "    return ${0:};",
            "  },",
            "),"
        ],
        "description": "Similar to the Builder widget except that the framework calls the builder function at layout time and provides the parent widget's constraints."
    },
    "Single Child ScrollView": {
        "prefix": "scsv",
        "body": [
            "SingleChildScrollView(",
            "  controller: ${1:controller,}",
            "  child: Column(",
            "    ${0:}",
            "  ),",
            " }",
            "),"
        ],
        "description": "Creates a scroll view with a single child"
    },
    "Future Builder": {
        "prefix": "ftbldr",
        "body": [
            "FutureBuilder(",
            "  future: ${1:Future},",
            "  initialData: ${2:InitialData},",
            "  builder: (BuildContext context, AsyncSnapshot snapshot) {",
            "    return ${3:};",
            "  },",
            "),"
        ],
        "description": "Creates a Future Builder. This builds itself based on the latest snapshot of interaction with a Future."
    },
    "No Such Method": {
        "prefix": "nosm",
        "body": [
            "@override",
            "dynamic noSuchMethod(Invocation invocation) {",
            "  ${1:}",
            "}"
        ],
        "description": "This method is invoked when a non-existent method or property is accessed."
    },
    "Inherited Widget": {
        "prefix": "inhwdgt",
        "body": [
            "class ${1:Name} extends InheritedWidget {",
            "  ${1:Name}({Key key, this.child}) : super(key: key, child: child);",
            "",
            "  final Widget child;",
            "",
            "  static ${1:Name} of(BuildContext context) {",
            "    return (context.inheritFromWidgetOfExactType(${1:Name})as ${1:Name});",
            "  }",
            "",
            "  @override",
            "  bool updateShouldNotify( ${1:Name} oldWidget) {",
            "    return ${2:true};",
            "  }",
            "}"
        ],
        "description": "Class used to propagate information down the widget tree"
    },
    "Mounted": {
        "prefix": "mntd",
        "body": [
            "@override",
            "bool get mounted {",
            "  ${0:}",
            "}"
        ],
        "description": "Whether this State object is currently in a tree."
    },
    "Sink": {
        "prefix": "snk",
        "body": [
            "Sink<${1:type}> get ${2:name} => _${2:name}Controller.sink;",
            "final _${2:name}Controller = StreamController<${1:type}>();"
        ],
        "description": "A Sink is the input of a stream."
    },
    "Stream": {
        "prefix": "strm",
        "body": [
            "Stream<${1:type}> get ${2:name} => _${2:name}Controller.stream;",
            "final _${2:name}Controller = StreamController<${1:type}>();"
        ],
        "description": "A source of asynchronous data events. A stream can be of any data type <T>"
    }
}