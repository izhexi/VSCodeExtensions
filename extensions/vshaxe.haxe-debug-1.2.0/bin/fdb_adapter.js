// Generated by Haxe 4.0.0
(function () { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $getIterator(it);
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Sys = function() { };
Sys.__name__ = true;
Sys.environment = function() {
	var m = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = Reflect.fields(process.env);
	while(_g < _g1.length) {
		var key = _g1[_g];
		++_g;
		var v = process.env[key];
		if(__map_reserved[key] != null) {
			m.setReserved(key,v);
		} else {
			m.h[key] = v;
		}
	}
	return m;
};
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = true;
var _$Sys_FileOutput = function(fd) {
	this.fd = fd;
};
_$Sys_FileOutput.__name__ = true;
_$Sys_FileOutput.__super__ = haxe_io_Output;
_$Sys_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		js_node_Fs.writeSync(this.fd,String.fromCharCode(c));
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		return js_node_Fs.writeSync(this.fd,new js_node_buffer_Buffer(data.buffer,data.byteOffset,s.length),pos,len);
	}
	,writeString: function(s) {
		js_node_Fs.writeSync(this.fd,s);
	}
	,flush: function() {
		js_node_Fs.fsyncSync(this.fd);
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
});
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
var _$Sys_FileInput = function(fd) {
	this.fd = fd;
};
_$Sys_FileInput.__name__ = true;
_$Sys_FileInput.__super__ = haxe_io_Input;
_$Sys_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		var buf = new js_node_buffer_Buffer(1);
		try {
			js_node_Fs.readSync(this.fd,buf,0,1,null);
		} catch( e ) {
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			if(e1.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e1));
			}
		}
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = new js_node_buffer_Buffer(data.buffer,data.byteOffset,s.length);
		try {
			return js_node_Fs.readSync(this.fd,buf,pos,len,null);
		} catch( e ) {
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			if(e1.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e1));
			}
		}
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
});
var adapter_DebugSession = require("vscode-debugadapter").DebugSession;
var adapter_Source = require("vscode-debugadapter").Source;
var adapter_Scope = require("vscode-debugadapter").Scope;
var adapter_Thread = require("vscode-debugadapter").Thread;
var adapter_Breakpoint = require("vscode-debugadapter").Breakpoint;
var adapter_StoppedEvent = require("vscode-debugadapter").StoppedEvent;
var adapter_InitializedEvent = require("vscode-debugadapter").InitializedEvent;
var adapter_TerminatedEvent = require("vscode-debugadapter").TerminatedEvent;
var adapter_OutputEvent = require("vscode-debugadapter").OutputEvent;
var adapter_Handles = require("vscode-debugadapter").Handles;
var vshaxeDebug_BaseAdapter = function(deps) {
	this.terminated = false;
	adapter_DebugSession.call(this);
	this.deps = deps;
};
vshaxeDebug_BaseAdapter.__name__ = true;
vshaxeDebug_BaseAdapter.__super__ = adapter_DebugSession;
vshaxeDebug_BaseAdapter.prototype = $extend(adapter_DebugSession.prototype,{
	dispatchRequest: function(request) {
		this.traceJson(request);
		adapter_DebugSession.prototype.dispatchRequest.call(this,request);
	}
	,sendResponse: function(response) {
		haxe_Log.trace("sendResponse: " + Std.string(response),{ fileName : "src/vshaxeDebug/BaseAdapter.hx", lineNumber : 37, className : "vshaxeDebug.BaseAdapter", methodName : "sendResponse"});
		adapter_DebugSession.prototype.sendResponse.call(this,response);
	}
	,initializeRequest: function(response,args) {
		response.body.supportsConfigurationDoneRequest = true;
		response.body.supportsEvaluateForHovers = true;
		response.body.supportsStepBack = false;
		this.sendResponse(response);
	}
	,launchRequest: function(response,args) {
		var customArgs = args;
		this.context = this.deps.createContext(customArgs.program);
		this["debugger"] = this.context["debugger"];
		this.parser = this.context["debugger"].parser;
		this.cmd = this.context["debugger"].commandBuilder;
		if(customArgs.receiveAdapterOutput != null && customArgs.receiveAdapterOutput) {
			this.redirectTraceToDebugConsole(this.context);
		}
		var launchCommand = this.deps.getLaunchCommand(this.context,response,customArgs);
		launchCommand.execute();
	}
	,attachRequest: function(response,args) {
		var customArgs = args;
		this.context = this.deps.createContext(customArgs.program);
		this["debugger"] = this.context["debugger"];
		this.parser = this.context["debugger"].parser;
		this.cmd = this.context["debugger"].commandBuilder;
		if(customArgs.receiveAdapterOutput != null && customArgs.receiveAdapterOutput) {
			this.redirectTraceToDebugConsole(this.context);
		}
		var maybeAttachCommand = this.deps.getAttachCommand(this.context,response,customArgs);
		if(maybeAttachCommand[1] == 0) {
			var attachCommand = maybeAttachCommand[2];
			attachCommand.execute();
		} else {
			throw new js__$Boot_HaxeError("adapter doesn't support attach");
		}
	}
	,setBreakPointsRequest: function(response,args) {
		var command = new vshaxeDebug_commands_SetBreakpoints(this.context,response,args);
		command.execute();
	}
	,configurationDoneRequest: function(response,args) {
		this["debugger"].queueSend(this.cmd.continueCommand());
		this.context.onEvent(vshaxeDebug_EStateControlEvent.Continue);
		this.sendResponse(response);
	}
	,threadsRequest: function(response) {
		response.body = { threads : [new adapter_Thread(1,"thread 1")]};
		this.sendResponse(response);
	}
	,stackTraceRequest: function(response,args) {
		var cmd = new vshaxeDebug_commands_StackTrace(this.context,response,args);
		cmd.execute();
	}
	,scopesRequest: function(response,args) {
		var frameId = args.frameId;
		var scopes = [new adapter_Scope("Locals",this.context.variableHandles.create("locals_" + frameId),false),new adapter_Scope("Members",this.context.variableHandles.create("members_" + frameId),false),new adapter_Scope("Globals",this.context.variableHandles.create("globals_" + frameId),true)];
		response.body = { scopes : scopes};
		this.sendResponse(response);
	}
	,variablesRequest: function(response,args) {
		var command = new vshaxeDebug_commands_Variables(this.context,response,args);
		command.execute();
	}
	,evaluateRequest: function(response,args) {
		if(this.context == null) {
			this.sendResponse(response);
			return;
		}
		var _g = this.context.debuggerState;
		if(_g[1] == 3) {
			var command = new vshaxeDebug_commands_Evaluate(this.context,response,args);
			command.execute();
		} else {
			this.sendResponse(response);
		}
	}
	,stepInRequest: function(response,args) {
		this.stepRequest(this.cmd.stepIn(),response);
	}
	,stepOutRequest: function(response,args) {
		this.stepRequest(this.cmd.stepOut(),response);
	}
	,nextRequest: function(response,args) {
		this.stepRequest(this.cmd.next(),response);
	}
	,stepRequest: function(cmd,response) {
		var _gthis = this;
		this["debugger"].queueSend(cmd,function(_) {
			_gthis.sendResponse(response);
			_gthis.sendEvent(new adapter_StoppedEvent("step",1));
			return true;
		});
	}
	,continueRequest: function(response,args) {
		this["debugger"].queueSend(this.cmd.continueCommand());
		this.sendResponse(response);
		this.context.onEvent(vshaxeDebug_EStateControlEvent.Continue);
	}
	,pauseRequest: function(response,args) {
		var _gthis = this;
		this["debugger"].queueSend(this.cmd.pause(),function(_) {
			_gthis.sendResponse(response);
			_gthis.context.onEvent(vshaxeDebug_EStateControlEvent.Stop("pause"));
			return true;
		});
	}
	,disconnectRequest: function(response,args) {
		var _gthis = this;
		if(this.terminated) {
			this.sendResponse(response);
			return;
		}
		this["debugger"].queueSend(this.cmd.disconnect(),function(_) {
			_gthis.sendResponse(response);
			return true;
		});
	}
	,onPromptGot: function(lines) {
		var _g = this.context.debuggerState;
		switch(_g[1]) {
		case 0:
			if(this.parser.isGreetingMatched(lines)) {
				this.context.onEvent(vshaxeDebug_EStateControlEvent.GreetingReceived);
			} else {
				haxe_Log.trace("Start FAILED: [" + Std.string(lines) + "]",{ fileName : "src/vshaxeDebug/BaseAdapter.hx", lineNumber : 191, className : "vshaxeDebug.BaseAdapter", methodName : "onPromptGot"});
			}
			break;
		case 2:
			if(this.parser.isStopOnBreakpointMatched(lines)) {
				this.context.onEvent(vshaxeDebug_EStateControlEvent.Stop("breakpoint"));
			} else if(this.parser.isStopOnExceptionMatched(lines)) {
				this.context.onEvent(vshaxeDebug_EStateControlEvent.Stop("exception"));
			}
			break;
		default:
		}
	}
	,allOutputReceiver: function(string) {
		var proceed = false;
		if(this.parser.isExitMatched(string)) {
			var event = new adapter_TerminatedEvent(false);
			this.traceJson(event);
			this.sendEvent(event);
			this.terminated = true;
			this["debugger"].stop();
			return true;
		}
		var _g = this.context.debuggerState;
		if(_g[1] == 2) {
			var lines = this.parser.getTraces(string);
			var _g1 = 0;
			while(_g1 < lines.length) {
				var line = lines[_g1];
				++_g1;
				this.context.sendToOutput(line);
				proceed = true;
			}
		}
		return proceed;
	}
	,traceJson: function(value) {
		haxe_Log.trace(JSON.stringify(value),{ fileName : "src/vshaxeDebug/BaseAdapter.hx", lineNumber : 228, className : "vshaxeDebug.BaseAdapter", methodName : "traceJson"});
	}
	,redirectTraceToDebugConsole: function(context) {
		haxe_Log.trace = function(v,i) {
			context.sendToOutput("DebugAdapter: " + v,"stdout");
		};
	}
});
var fdbAdapter_Adapter = function() {
	var deps = { createContext : $bind(this,this.createContext), getLaunchCommand : $bind(this,this.getLaunchCommand), getAttachCommand : $bind(this,this.getAttachCommand)};
	vshaxeDebug_BaseAdapter.call(this,deps);
};
fdbAdapter_Adapter.__name__ = true;
fdbAdapter_Adapter.main = function() {
	fdbAdapter_Adapter.setupTrace();
	adapter_DebugSession.run(fdbAdapter_Adapter);
};
fdbAdapter_Adapter.setupTrace = function() {
	fdbAdapter_Adapter.logPath = __dirname + "/../fdb_log.txt";
	js_node_Fs.writeFile(fdbAdapter_Adapter.logPath,"","utf8",function(e) {
	});
	haxe_Log.trace = function(v,i) {
		var r = [Std.string(v)];
		fdbAdapter_Adapter.Log({ type : "INFO", message : r.join(" ")});
	};
};
fdbAdapter_Adapter.Log = function(input) {
	js_node_Fs.appendFile(fdbAdapter_Adapter.logPath,JSON.stringify(input) + "\n","utf8",function(e) {
	});
};
fdbAdapter_Adapter.__super__ = vshaxeDebug_BaseAdapter;
fdbAdapter_Adapter.prototype = $extend(vshaxeDebug_BaseAdapter.prototype,{
	getLaunchCommand: function(context,response,args) {
		return new fdbAdapter_commands_Launch(context,response,args);
	}
	,getAttachCommand: function(context,response,args) {
		var command = new fdbAdapter_commands_Attach(context,response,args);
		return haxe_ds_Option.Some(command);
	}
	,createContext: function(program) {
		var scriptPath = __dirname;
		var commandBuilder = new fdbAdapter_CommandBuilder();
		var eolSign = vshaxeDebug_PlatformParameters.getEndOfLineSign();
		var parser = new fdbAdapter_Parser(eolSign);
		var cliAdapterConfig = { cmd : this.resolveJavaPath(), cmdParams : ["-Duser.language=en","-jar","" + scriptPath + "/../fdb/fdb.jar"], onPromptGot : $bind(this,this.onPromptGot), onError : function(error) {
			return "Could not start fdb. Make sure that PATH contains the Java executable or JAVA_HOME is set correctly.";
		}, allOutputReceiver : $bind(this,this.allOutputReceiver), commandBuilder : commandBuilder, parser : parser};
		this["debugger"] = new vshaxeDebug_CLIAdapter(cliAdapterConfig);
		this["debugger"].start();
		return new vshaxeDebug_Context(this,this["debugger"]);
	}
	,resolveJavaPath: function() {
		var path = "java";
		var javaHome = process.env["JAVA_HOME"];
		if(javaHome != null) {
			path = haxe_io_Path.join([javaHome,"bin/java"]);
		}
		return path;
	}
});
var vshaxeDebug_ICommandBuilder = function() { };
vshaxeDebug_ICommandBuilder.__name__ = true;
var fdbAdapter_CommandBuilder = function() {
};
fdbAdapter_CommandBuilder.__name__ = true;
fdbAdapter_CommandBuilder.__interfaces__ = [vshaxeDebug_ICommandBuilder];
fdbAdapter_CommandBuilder.prototype = {
	launch: function(program) {
		return "run " + program;
	}
	,frameUp: function() {
		return "up";
	}
	,frameDown: function() {
		return "down";
	}
	,stepIn: function() {
		return "step";
	}
	,stepOut: function() {
		return "finish";
	}
	,next: function() {
		return "next";
	}
	,continueCommand: function() {
		return "continue";
	}
	,pause: function() {
		return "\ny";
	}
	,stackTrace: function() {
		return "bt";
	}
	,addBreakpoint: function(fileName,filePath,line) {
		return "break " + fileName + ":" + line;
	}
	,removeBreakpoint: function(fileName,filePath,line) {
		return "clear " + fileName + ":" + line;
	}
	,printLocalVariables: function() {
		return "info locals";
	}
	,printFunctionArguments: function() {
		return "info arguments";
	}
	,printGlobalVariables: function() {
		return "info global";
	}
	,printObjectProperties: function(objectName) {
		return "print " + objectName + ".";
	}
	,printMembers: function() {
		return "print this.";
	}
	,showFiles: function() {
		return "show files";
	}
	,evaluate: function(expr) {
		return "print " + expr;
	}
	,disconnect: function() {
		return "kill\ny\nquit";
	}
};
var vshaxeDebug_IParser = function() { };
vshaxeDebug_IParser.__name__ = true;
var fdbAdapter_Parser = function(eolSign) {
	this.prompt = "(fdb) ";
	this.promptLength = this.prompt.length;
	this.eolSign = eolSign;
};
fdbAdapter_Parser.__name__ = true;
fdbAdapter_Parser.__interfaces__ = [vshaxeDebug_IParser];
fdbAdapter_Parser.prototype = {
	parseFunctionArguments: function(lines) {
		return this.parseVariables(lines);
	}
	,parseGlobalVariables: function(lines) {
		return this.parseVariables(lines);
	}
	,parseLocalVariables: function(lines) {
		return this.parseVariables(lines);
	}
	,parseMembers: function(lines) {
		lines.shift();
		return this.parseVariables(lines);
	}
	,parseObjectProperties: function(lines) {
		lines.shift();
		return this.parseVariables(lines);
	}
	,parseEvaluate: function(lines) {
		var variables = this.parseVariables(lines);
		haxe_Log.trace(variables,{ fileName : "src/fdbAdapter/Parser.hx", lineNumber : 40, className : "fdbAdapter.Parser", methodName : "parseEvaluate"});
		if(variables.length > 0) {
			return haxe_ds_Option.Some(variables[0]);
		} else {
			return haxe_ds_Option.None;
		}
	}
	,parseStackTrace: function(lines,pathProvider) {
		var maybeAddSource = function(frame,name) {
			if(name != "<null>") {
				frame.source = { name : name, path : pathProvider(name)};
			}
		};
		var result = [];
		var rMethod = new EReg("#([0-9]+)\\s+this = \\[Object [0-9]+, class='(.+)'\\]\\.(.+)\\(.*\\) at (.*):([0-9]+).*","");
		var anonFunction = new EReg("#([0-9]+)\\s+this = \\[Function [0-9]+, name='(.*)'\\]\\.([a-zA-Z0-9/\\$<>]+).*\\) at (.*):([0-9]+).*","");
		var globalCall = new EReg("#([0-9]+)\\s+(.*)\\(\\) at (.*):([0-9]+)","");
		var _g = 0;
		while(_g < lines.length) {
			var l = lines[_g];
			++_g;
			if(rMethod.match(l)) {
				var frame1 = { id : Std.parseInt(rMethod.matched(1)), name : rMethod.matched(2) + "." + rMethod.matched(3), line : Std.parseInt(rMethod.matched(5)), column : 0};
				maybeAddSource(frame1,rMethod.matched(4));
				result.push(frame1);
			} else if(anonFunction.match(l)) {
				var frame2 = { id : Std.parseInt(anonFunction.matched(1)), name : anonFunction.matched(2) + "." + anonFunction.matched(3), line : Std.parseInt(anonFunction.matched(5)), column : 0};
				maybeAddSource(frame2,anonFunction.matched(4));
				result.push(frame2);
			} else if(globalCall.match(l)) {
				result.push({ id : Std.parseInt(globalCall.matched(1)), name : globalCall.matched(2), line : Std.parseInt(globalCall.matched(4)), column : 0});
			}
		}
		return result;
	}
	,parseAddBreakpoint: function(lines) {
		var result = haxe_ds_Option.None;
		var breakpointData = lines[0];
		var r = new EReg("Breakpoint ([0-9]+).*: file ([0-9A-Za-z\\.]+), line ([0-9]+)","");
		if(r.match(breakpointData)) {
			result = haxe_ds_Option.Some({ id : Std.parseInt(r.matched(1)), fileName : r.matched(2), line : Std.parseInt(r.matched(3))});
		}
		return result;
	}
	,parseShowFiles: function(lines) {
		var result = [];
		var rRow = new EReg("^([0-9]+) (.+), ([a-zA-Z0-9:.]+)$","");
		var _g = 0;
		while(_g < lines.length) {
			var l = lines[_g];
			++_g;
			if(rRow.match(l)) {
				result.push({ name : rRow.matched(3), path : rRow.matched(2)});
			}
		}
		return result;
	}
	,getLines: function(rawInput) {
		return rawInput.split(this.eolSign);
	}
	,getLinesExceptPrompt: function(rawInput) {
		var withoutPrompt = rawInput.substring(0,rawInput.length - this.promptLength);
		return this.getLines(withoutPrompt);
	}
	,getTraces: function(rawInput) {
		var result = [];
		var lines = this.getLines(rawInput);
		var traceR = new EReg("\\[trace\\](.*)","");
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			if(traceR.match(line)) {
				result.push(line);
			}
		}
		return result;
	}
	,isPromptMatched: function(rawInput) {
		return HxOverrides.substr(rawInput,-this.promptLength,null) == this.prompt;
	}
	,isExitMatched: function(rawInput) {
		var exitR = new EReg("\\[UnloadSWF\\]","");
		return exitR.match(rawInput);
	}
	,isGreetingMatched: function(lines) {
		var firstLine = lines[0];
		if(firstLine != null) {
			return HxOverrides.substr(firstLine,0,5) == "Adobe";
		} else {
			return false;
		}
	}
	,isStopOnBreakpointMatched: function(lines) {
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			var r = new EReg("Breakpoint ([0-9]+),(.*) (.+).hx:([0-9]+)","");
			if(r.match(line)) {
				return true;
			}
		}
		return false;
	}
	,isStopOnExceptionMatched: function(lines) {
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			var r = new EReg("^\\[Fault\\].*","");
			if(r.match(line)) {
				return true;
			}
		}
		return false;
	}
	,parseVariables: function(lines) {
		var rVar = new EReg("^(.*) = (.*)$","");
		var result = [];
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			if(rVar.match(line)) {
				var name = StringTools.trim(rVar.matched(1));
				var value = rVar.matched(2);
				var type = this.detectExpressionType(value);
				result.push({ name : name, type : type, value : value});
			}
		}
		return result;
	}
	,detectExpressionType: function(expr) {
		var rObjectType = new EReg("^\\[Object (\\d+),","");
		var rIntType = new EReg("^\\d+ \\(0\\x\\d+\\)","");
		var rFloatType = new EReg("^\\d+\\.\\d+$","");
		var rStringType = new EReg("^[\\\\\"].*[\\\\\"]$","");
		var rBoolType = new EReg("^[t|f]\\S+$","");
		if(rObjectType.match(expr)) {
			var objectId = Std.parseInt(rObjectType.matched(1));
			return vshaxeDebug_VariableType.Object(objectId);
		} else if(rIntType.match(expr)) {
			return vshaxeDebug_VariableType.Simple("Int");
		} else if(rFloatType.match(expr)) {
			return vshaxeDebug_VariableType.Simple("Float");
		} else if(rStringType.match(expr)) {
			return vshaxeDebug_VariableType.Simple("String");
		} else if(rBoolType.match(expr)) {
			return vshaxeDebug_VariableType.Simple("Bool");
		} else {
			return vshaxeDebug_VariableType.Simple("Unknown");
		}
	}
};
var vshaxeDebug_commands_BaseCommand = function(context,response,args) {
	this.context = context;
	this["debugger"] = context["debugger"];
	this.response = response;
	this.args = args;
	this.cmd = this["debugger"].commandBuilder;
	this.parser = this["debugger"].parser;
};
vshaxeDebug_commands_BaseCommand.__name__ = true;
vshaxeDebug_commands_BaseCommand.prototype = {
	execute: function() {
	}
};
var fdbAdapter_commands_Attach = function(context,response,args) {
	vshaxeDebug_commands_BaseCommand.call(this,context,response,args);
};
fdbAdapter_commands_Attach.__name__ = true;
fdbAdapter_commands_Attach.__super__ = vshaxeDebug_commands_BaseCommand;
fdbAdapter_commands_Attach.prototype = $extend(vshaxeDebug_commands_BaseCommand.prototype,{
	execute: function() {
		this["debugger"].queueSend("run",function(_) {
			return true;
		});
		this.context.sendToOutput("waiting..","stdout");
	}
});
var fdbAdapter_commands_Launch = function(context,response,args) {
	vshaxeDebug_commands_BaseCommand.call(this,context,response,args);
};
fdbAdapter_commands_Launch.__name__ = true;
fdbAdapter_commands_Launch.__super__ = vshaxeDebug_commands_BaseCommand;
fdbAdapter_commands_Launch.prototype = $extend(vshaxeDebug_commands_BaseCommand.prototype,{
	execute: function() {
		var program = this.args.program;
		if(!vshaxeDebug_PathUtils.isAbsolutePath(program)) {
			if(!vshaxeDebug_PathUtils.isOnPath(program)) {
				this.context.sendError(this.response,"Cannot find runtime " + program + " on PATH.");
				this.context.protocol.sendResponse(this.response);
				return;
			}
		} else if(!js_node_Fs.existsSync(program)) {
			this.response.success = false;
			this.response.message = "Cannot find " + program;
			this.context.protocol.sendResponse(this.response);
			return;
		}
		this["debugger"].queueSend(this.cmd.launch(program),$bind(this,this.processResult));
		this.context.sendToOutput("running " + program,"stdout");
	}
	,processResult: function(lines) {
		var matchingOutputLine = lines[lines.length - 1];
		haxe_Log.trace("Launch: " + Std.string(lines),{ fileName : "src/fdbAdapter/commands/Launch.hx", lineNumber : 32, className : "fdbAdapter.commands.Launch", methodName : "processResult"});
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			if(this.matchSWFConnected(line)) {
				this.context.protocol.sendResponse(this.response);
				this.context.sendToOutput("launch success","stdout");
				return true;
			}
		}
		return false;
	}
	,matchSWFConnected: function(data) {
		if(data == null) {
			return false;
		} else {
			return HxOverrides.substr(data,0,5) == "[SWF]";
		}
	}
});
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos != null && infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
};
var haxe_ds_Option = { __ename__ : true, __constructs__ : ["Some","None"] };
haxe_ds_Option.Some = function(v) { var $x = ["Some",0,v]; $x.__enum__ = haxe_ds_Option; $x.toString = $estr; return $x; };
haxe_ds_Option.None = ["None",1];
haxe_ds_Option.None.toString = $estr;
haxe_ds_Option.None.__enum__ = haxe_ds_Option;
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.__name__ = true;
haxe_io_Path.withoutDirectory = function(path) {
	var s = new haxe_io_Path(path);
	s.dir = null;
	return s.toString();
};
haxe_io_Path.join = function(paths) {
	var paths1 = paths.filter(function(s) {
		if(s != null) {
			return s != "";
		} else {
			return false;
		}
	});
	if(paths1.length == 0) {
		return "";
	}
	var path = paths1[0];
	var _g1 = 1;
	var _g = paths1.length;
	while(_g1 < _g) {
		var i = _g1++;
		path = haxe_io_Path.addTrailingSlash(path);
		path += paths1[i];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var regex_r = new RegExp("([^:])/+","g".split("u").join(""));
	var result = tmp.replace(regex_r,"$1" + slash);
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g11 = 0;
	var _g2 = tmp.length;
	while(_g11 < _g2) {
		var i = _g11++;
		var _g21 = tmp.charCodeAt(i);
		switch(_g21) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i1 = _g21;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCharCode(i1);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i2 = _g21;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCharCode(i2);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if((o instanceof Array)) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_node_ChildProcess = require("child_process");
var js_node_Fs = require("fs");
var js_node_Path = require("path");
var js_node_buffer_Buffer = require("buffer").Buffer;
var vshaxeDebug__$CLIAdapter_DebuggerCommand = function(cmd,resultReceiver) {
	this.cmd = cmd;
	this.resultReceiver = resultReceiver;
	this.done = false;
};
vshaxeDebug__$CLIAdapter_DebuggerCommand.__name__ = true;
vshaxeDebug__$CLIAdapter_DebuggerCommand.prototype = {
	execute: function(inputHandle) {
		inputHandle(this.cmd);
		if(this.resultReceiver == null) {
			this.setDone();
		}
	}
	,processResult: function(lines) {
		if(this.resultReceiver(lines)) {
			this.setDone();
		}
	}
	,setDone: function() {
		this.done = true;
	}
};
var vshaxeDebug_IDebugger = function() { };
vshaxeDebug_IDebugger.__name__ = true;
var vshaxeDebug_CLIAdapter = function(config) {
	this.config = config;
	this.onPromptGot = config.onPromptGot;
	this.onError = config.onError;
	this.allOutputReceiver = config.allOutputReceiver;
	this.commandBuilder = config.commandBuilder;
	this.parser = config.parser;
	this.buffer = new js_node_buffer_Buffer(0);
};
vshaxeDebug_CLIAdapter.__name__ = true;
vshaxeDebug_CLIAdapter.__interfaces__ = [vshaxeDebug_IDebugger];
vshaxeDebug_CLIAdapter.prototype = {
	start: function() {
		var env = { };
		var k = Sys.environment().keys();
		while(k.hasNext()) {
			var k1 = k.next();
			env[k1] = process.env[k1];
		}
		this.proc = js_node_ChildProcess.spawn(this.config.cmd,this.config.cmdParams,{ env : env});
		this.proc.stdout.on("data",$bind(this,this.onData));
		this.proc.stderr.on("data",function(buf) {
			haxe_Log.trace(buf.toString(),{ fileName : "src/vshaxeDebug/CLIAdapter.hx", lineNumber : 86, className : "vshaxeDebug.CLIAdapter", methodName : "start"});
		});
	}
	,stop: function() {
		this.proc.kill("SIGINT");
	}
	,queueSend: function(command,callback) {
		var cmd = new vshaxeDebug__$CLIAdapter_DebuggerCommand(command,callback);
		this.queueCommand(cmd);
	}
	,queueCommand: function(command) {
		if(this.queueHead == null) {
			this.queueHead = this.queueTail = command;
		} else {
			this.queueTail.next = command;
			command.prev = this.queueTail;
			this.queueTail = command;
		}
		this.checkQueue();
	}
	,send: function(command) {
		haxe_Log.trace("send to debugger cli: " + command + "\n",{ fileName : "src/vshaxeDebug/CLIAdapter.hx", lineNumber : 111, className : "vshaxeDebug.CLIAdapter", methodName : "send"});
		try {
			this.proc.stdin.write("" + command + "\n");
		} catch( e ) {
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			if((e1 instanceof Error)) {
				throw new js__$Boot_HaxeError(this.onError(e1));
			} else {
				throw e;
			}
		}
	}
	,checkQueue: function() {
		if(this.currentCommand == null && this.queueHead != null) {
			this.currentCommand = this.queueHead;
			this.queueHead = this.currentCommand.next;
			this.executeCurrentCommand();
		}
	}
	,executeCurrentCommand: function() {
		this.currentCommand.execute($bind(this,this.send));
		if(this.currentCommand.done) {
			this.removeCurrentCommand();
		}
	}
	,removeCurrentCommand: function() {
		this.currentCommand = null;
		this.checkQueue();
	}
	,removeCommand: function(command) {
		if(command == this.queueHead) {
			this.queueHead = command.next;
		}
		if(command == this.queueTail) {
			this.queueTail = command.prev;
		}
		if(command.prev != null) {
			command.prev.next = command.next;
		}
		if(command.next != null) {
			command.next.prev = command.prev;
		}
	}
	,onData: function(buf) {
		var newLength = this.buffer.length + buf.length;
		this.buffer = js_node_buffer_Buffer.concat([this.buffer,buf],newLength);
		var rawInput = this.buffer.toString();
		if(this.parser.isPromptMatched(rawInput)) {
			var lines = this.parser.getLinesExceptPrompt(rawInput);
			lines.pop();
			this.buffer = new js_node_buffer_Buffer(0);
			if(this.currentCommand != null) {
				this.currentCommand.processResult(lines);
				if(this.currentCommand.done) {
					this.removeCurrentCommand();
				}
			}
			this.onPromptGot(lines);
		} else if(this.allOutputReceiver(rawInput)) {
			this.buffer = new js_node_buffer_Buffer(0);
		}
	}
};
var vshaxeDebug_CommandsBatch = function($debugger,callback) {
	this["debugger"] = $debugger;
	this.callback = callback;
	this.waiting = this.got = 0;
};
vshaxeDebug_CommandsBatch.__name__ = true;
vshaxeDebug_CommandsBatch.prototype = {
	add: function(command,callback) {
		if(callback != null) {
			this.waiting++;
		}
		this["debugger"].queueSend(command,this.wrap(callback));
	}
	,onResponse: function() {
		this.got++;
		this.checkIsDone();
	}
	,checkIsDone: function() {
		if(this.waiting == this.got) {
			this.callback();
		}
	}
	,wrap: function(callback) {
		var _gthis = this;
		var wrapper = callback;
		if(callback != null) {
			wrapper = function(output) {
				var result = callback(output);
				if(result) {
					_gthis.got++;
					_gthis.checkIsDone();
				}
				return result;
			};
		}
		return wrapper;
	}
};
var vshaxeDebug_Context = function(protocol,$debugger) {
	this.protocol = protocol;
	this["debugger"] = $debugger;
	this.debuggerState = vshaxeDebug_EDebuggerState.WaitingGreeting;
	this.breakpoints = new haxe_ds_StringMap();
	this.fileNameToFullPathDict = new haxe_ds_StringMap();
	this.variableHandles = new adapter_Handles();
	this.knownObjects = new haxe_ds_IntMap();
};
vshaxeDebug_Context.__name__ = true;
vshaxeDebug_Context.prototype = {
	onEvent: function(event) {
		this.debuggerState = vshaxeDebug_StateController.onEvent(this,event);
	}
	,sendToOutput: function(output,category) {
		if(category == null) {
			category = "console";
		}
		this.protocol.sendEvent(new adapter_OutputEvent(output + "\n",category));
	}
	,sendError: function(response,message) {
		response.success = false;
		response.message = message;
		this.protocol.sendResponse(response);
	}
};
var vshaxeDebug_EDebuggerState = { __ename__ : true, __constructs__ : ["WaitingGreeting","Configuring","Running","Stopped"] };
vshaxeDebug_EDebuggerState.WaitingGreeting = ["WaitingGreeting",0];
vshaxeDebug_EDebuggerState.WaitingGreeting.toString = $estr;
vshaxeDebug_EDebuggerState.WaitingGreeting.__enum__ = vshaxeDebug_EDebuggerState;
vshaxeDebug_EDebuggerState.Configuring = ["Configuring",1];
vshaxeDebug_EDebuggerState.Configuring.toString = $estr;
vshaxeDebug_EDebuggerState.Configuring.__enum__ = vshaxeDebug_EDebuggerState;
vshaxeDebug_EDebuggerState.Running = ["Running",2];
vshaxeDebug_EDebuggerState.Running.toString = $estr;
vshaxeDebug_EDebuggerState.Running.__enum__ = vshaxeDebug_EDebuggerState;
vshaxeDebug_EDebuggerState.Stopped = function(frames,currentFrame) { var $x = ["Stopped",3,frames,currentFrame]; $x.__enum__ = vshaxeDebug_EDebuggerState; $x.toString = $estr; return $x; };
var vshaxeDebug_EStateControlEvent = { __ename__ : true, __constructs__ : ["GreetingReceived","Continue","Stop","FrameUp","FrameDown","SetFrames"] };
vshaxeDebug_EStateControlEvent.GreetingReceived = ["GreetingReceived",0];
vshaxeDebug_EStateControlEvent.GreetingReceived.toString = $estr;
vshaxeDebug_EStateControlEvent.GreetingReceived.__enum__ = vshaxeDebug_EStateControlEvent;
vshaxeDebug_EStateControlEvent.Continue = ["Continue",1];
vshaxeDebug_EStateControlEvent.Continue.toString = $estr;
vshaxeDebug_EStateControlEvent.Continue.__enum__ = vshaxeDebug_EStateControlEvent;
vshaxeDebug_EStateControlEvent.Stop = function(reason) { var $x = ["Stop",2,reason]; $x.__enum__ = vshaxeDebug_EStateControlEvent; $x.toString = $estr; return $x; };
vshaxeDebug_EStateControlEvent.FrameUp = ["FrameUp",3];
vshaxeDebug_EStateControlEvent.FrameUp.toString = $estr;
vshaxeDebug_EStateControlEvent.FrameUp.__enum__ = vshaxeDebug_EStateControlEvent;
vshaxeDebug_EStateControlEvent.FrameDown = ["FrameDown",4];
vshaxeDebug_EStateControlEvent.FrameDown.toString = $estr;
vshaxeDebug_EStateControlEvent.FrameDown.__enum__ = vshaxeDebug_EStateControlEvent;
vshaxeDebug_EStateControlEvent.SetFrames = function(frames) { var $x = ["SetFrames",5,frames]; $x.__enum__ = vshaxeDebug_EStateControlEvent; $x.toString = $estr; return $x; };
var vshaxeDebug_StateController = function() { };
vshaxeDebug_StateController.__name__ = true;
vshaxeDebug_StateController.onEvent = function(context,event) {
	var protocol = context.protocol;
	var currentState = context.debuggerState;
	switch(currentState[1]) {
	case 0:
		if(event[1] == 0) {
			protocol.sendEvent(new adapter_InitializedEvent());
			return vshaxeDebug_EDebuggerState.Configuring;
		} else {
			throw new js__$Boot_HaxeError("no transition: state: " + Std.string(currentState) + ", event: " + Std.string(event));
		}
		break;
	case 1:
		if(event[1] == 1) {
			return vshaxeDebug_EDebuggerState.Running;
		} else {
			throw new js__$Boot_HaxeError("no transition: state: " + Std.string(currentState) + ", event: " + Std.string(event));
		}
		break;
	case 2:
		if(event[1] == 2) {
			var reason = event[2];
			protocol.sendEvent(new adapter_StoppedEvent(reason,1));
			return vshaxeDebug_EDebuggerState.Stopped([],0);
		} else {
			throw new js__$Boot_HaxeError("no transition: state: " + Std.string(currentState) + ", event: " + Std.string(event));
		}
		break;
	case 3:
		switch(event[1]) {
		case 1:
			return vshaxeDebug_EDebuggerState.Running;
		case 3:
			var frames = currentState[2];
			var currentFrame = currentState[3];
			if(currentFrame < frames.length - 1) {
				return vshaxeDebug_EDebuggerState.Stopped(frames,currentFrame + 1);
			} else {
				throw new js__$Boot_HaxeError("no transition: state: " + Std.string(currentState) + ", event: " + Std.string(event));
			}
			break;
		case 4:
			var frames1 = currentState[2];
			var currentFrame1 = currentState[3];
			if(currentFrame1 > 0) {
				return vshaxeDebug_EDebuggerState.Stopped(frames1,currentFrame1 - 1);
			} else {
				throw new js__$Boot_HaxeError("no transition: state: " + Std.string(currentState) + ", event: " + Std.string(event));
			}
			break;
		case 5:
			var frames2 = currentState[2];
			var currentFrame2 = currentState[3];
			var newFrames = event[2];
			return vshaxeDebug_EDebuggerState.Stopped(newFrames,0);
		default:
			throw new js__$Boot_HaxeError("no transition: state: " + Std.string(currentState) + ", event: " + Std.string(event));
		}
		break;
	}
};
var vshaxeDebug_PathUtils = function() { };
vshaxeDebug_PathUtils.__name__ = true;
vshaxeDebug_PathUtils.normalize = function(path) {
	path = StringTools.replace(path,"\\","/");
	if(new EReg("^[a-zA-Z]:/","").match(path)) {
		path = "/" + path;
	}
	path = js_node_Path.normalize(path);
	path = StringTools.replace(path,"\\","/");
	return path;
};
vshaxeDebug_PathUtils.isAbsolutePath = function(path) {
	var result = false;
	if(path != "") {
		if(path.charAt(0) == "/") {
			result = true;
		}
		if(new EReg("^[a-zA-Z]:[\\\\/]","").match(path)) {
			result = true;
		}
	}
	return result;
};
vshaxeDebug_PathUtils.isOnPath = function(program) {
	if(process.platform == "win32") {
		var WHERE = "C:\\Windows\\System32\\where.exe";
		try {
			if(js_node_Fs.existsSync(WHERE)) {
				js_node_ChildProcess.execSync("" + WHERE + " " + program);
			}
			return true;
		} catch( e ) {
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		}
	} else {
		var WHICH = "/usr/bin/which";
		try {
			if(js_node_Fs.existsSync(WHICH)) {
				js_node_ChildProcess.execSync("" + WHICH + " '" + program + "'");
			}
			return true;
		} catch( e2 ) {
			var e3 = (e2 instanceof js__$Boot_HaxeError) ? e2.val : e2;
		}
	}
	return false;
};
vshaxeDebug_PathUtils.prototype = {
	normalizeDriveLetter: function(path) {
		var regex = new EReg("^([A-Z])(:[\\\\/].*)$","");
		if(regex.match(path)) {
			var drive = regex.matched(1);
			var tail = regex.matched(2);
			path = drive.toLowerCase() + tail;
		}
		return path;
	}
};
var vshaxeDebug_PlatformParameters = function() { };
vshaxeDebug_PlatformParameters.__name__ = true;
vshaxeDebug_PlatformParameters.getEndOfLineSign = function() {
	if(process.platform == "win32") {
		return "\r\n";
	} else {
		return "\n";
	}
};
var vshaxeDebug_VariableType = { __ename__ : true, __constructs__ : ["Object","Simple"] };
vshaxeDebug_VariableType.Object = function(id) { var $x = ["Object",0,id]; $x.__enum__ = vshaxeDebug_VariableType; $x.toString = $estr; return $x; };
vshaxeDebug_VariableType.Simple = function(type) { var $x = ["Simple",1,type]; $x.__enum__ = vshaxeDebug_VariableType; $x.toString = $estr; return $x; };
var vshaxeDebug_EScope = { __ename__ : true, __constructs__ : ["Locals","Global","Closure","ObjectDetails"] };
vshaxeDebug_EScope.Locals = function(frameId,type) { var $x = ["Locals",0,frameId,type]; $x.__enum__ = vshaxeDebug_EScope; $x.toString = $estr; return $x; };
vshaxeDebug_EScope.Global = function(frameId) { var $x = ["Global",1,frameId]; $x.__enum__ = vshaxeDebug_EScope; $x.toString = $estr; return $x; };
vshaxeDebug_EScope.Closure = function(frameId) { var $x = ["Closure",2,frameId]; $x.__enum__ = vshaxeDebug_EScope; $x.toString = $estr; return $x; };
vshaxeDebug_EScope.ObjectDetails = function(id,name) { var $x = ["ObjectDetails",3,id,name]; $x.__enum__ = vshaxeDebug_EScope; $x.toString = $estr; return $x; };
var vshaxeDebug_commands_Evaluate = function(context,response,args) {
	vshaxeDebug_commands_BaseCommand.call(this,context,response,args);
};
vshaxeDebug_commands_Evaluate.__name__ = true;
vshaxeDebug_commands_Evaluate.__super__ = vshaxeDebug_commands_BaseCommand;
vshaxeDebug_commands_Evaluate.prototype = $extend(vshaxeDebug_commands_BaseCommand.prototype,{
	execute: function() {
		var preparedExpression = this.prepareExpression(this.args.expression);
		var command = this.cmd.evaluate(preparedExpression);
		this["debugger"].queueSend(command,$bind(this,this.processResult));
	}
	,processResult: function(lines) {
		var exprResult = this.parser.parseEvaluate(lines);
		this.response.body = { result : "could not be evaluated", variablesReference : 0};
		if(exprResult[1] == 0) {
			var v = exprResult[2];
			var _g = v.type;
			if(_g[1] == 0) {
				var id = _g[2];
				var vRef = this.context.variableHandles.create("object_" + id);
				this.response.body.variablesReference = vRef;
			}
			this.response.body.result = v.value;
		}
		this.context.protocol.sendResponse(this.response);
		return true;
	}
	,prepareExpression: function(raw) {
		var dotStarts = new EReg("^\\..*","");
		var colonStarts = new EReg("^:.*","");
		if(dotStarts.match(raw)) {
			return "this" + raw;
		} else if(colonStarts.match(raw)) {
			return "";
		}
		return raw;
	}
});
var vshaxeDebug_commands_SetBreakpoints = function(context,response,args) {
	vshaxeDebug_commands_BaseCommand.call(this,context,response,args);
};
vshaxeDebug_commands_SetBreakpoints.__name__ = true;
vshaxeDebug_commands_SetBreakpoints.__super__ = vshaxeDebug_commands_BaseCommand;
vshaxeDebug_commands_SetBreakpoints.prototype = $extend(vshaxeDebug_commands_BaseCommand.prototype,{
	execute: function() {
		this.result = [];
		if(this.args.source.name == null) {
			this.args.source.name = haxe_io_Path.withoutDirectory(this.args.source.path);
		}
		var source = new adapter_Source(this.args.source.name,this.args.source.path);
		var pathKey = this.getKey(this.args.source.name);
		var _this = this.context.breakpoints;
		if(!(__map_reserved[pathKey] != null ? _this.existsReserved(pathKey) : _this.h.hasOwnProperty(pathKey))) {
			var _this1 = this.context.breakpoints;
			var value = [];
			if(__map_reserved[pathKey] != null) {
				_this1.setReserved(pathKey,value);
			} else {
				_this1.h[pathKey] = value;
			}
		}
		var _this2 = this.context.breakpoints;
		var breakpoints = __map_reserved[pathKey] != null ? _this2.getReserved(pathKey) : _this2.h[pathKey];
		var previouslySet = this.getAlreadySetMap(pathKey,this.context.breakpoints);
		var f = $bind(this,this.commandDoneCallback);
		var path = pathKey;
		var response = this.response;
		var batch = function() {
			f(path,response);
		};
		var batch1 = new vshaxeDebug_CommandsBatch(this.context["debugger"],batch);
		var _g = this.context.debuggerState;
		if(_g[1] == 2) {
			batch1.add(this.cmd.pause(),function(_) {
				return true;
			});
		}
		var _g1 = 0;
		var _g2 = this.args.breakpoints;
		while(_g1 < _g2.length) {
			var b = _g2[_g1];
			++_g1;
			if(previouslySet.h.hasOwnProperty(b.line)) {
				previouslySet.remove(b.line);
			} else {
				var breakpoint = new adapter_Breakpoint(true,b.line,0,source);
				var cmd = this.cmd.addBreakpoint(this.args.source.name,this.args.source.path,b.line);
				batch1.add(cmd,(function(container,breakpoint1,f1) {
					return function(lines) {
						return f1[0](breakpoint1[0],container[0],lines);
					};
				})([breakpoints],[breakpoint],[$bind(this,this.onBreakpointAdded)]));
			}
		}
		var b1 = previouslySet.iterator();
		while(b1.hasNext()) {
			var b2 = b1.next();
			var cmd1 = this.cmd.removeBreakpoint(b2.source.name,b2.source.path,b2.line);
			batch1.add(cmd1,(function(container1,breakpoint2,f2) {
				return function(lines1) {
					return f2[0](breakpoint2[0],container1[0],lines1);
				};
			})([breakpoints],[b2],[$bind(this,this.onBreakpointRemoved)]));
		}
		var _g11 = this.context.debuggerState;
		if(_g11[1] == 2) {
			batch1.add(this.cmd.continueCommand());
		}
		batch1.checkIsDone();
	}
	,onBreakpointAdded: function(breakpoint,container,lines) {
		var info = this.parser.parseAddBreakpoint(lines);
		if(info[1] == 0) {
			var bInfo = info[2];
			breakpoint.id = bInfo.id;
			breakpoint.source.name = bInfo.fileName;
			breakpoint.line = bInfo.line;
			container.push(breakpoint);
		} else {
			this.context.sendError(this.response,"AddBreakpoint FAILED: [ " + Std.string(lines) + " ]");
		}
		return true;
	}
	,onBreakpointRemoved: function(breakpoint,container,lines) {
		HxOverrides.remove(container,breakpoint);
		return true;
	}
	,commandDoneCallback: function(path,response) {
		var _this = this.context.breakpoints;
		var breakpoints = __map_reserved[path] != null ? _this.getReserved(path) : _this.h[path];
		var _g = [];
		var _g1 = 0;
		while(_g1 < breakpoints.length) {
			var b = breakpoints[_g1];
			++_g1;
			if(b.id > 0) {
				_g.push(b);
			}
		}
		var validated = _g;
		var _this1 = this.context.breakpoints;
		if(__map_reserved[path] != null) {
			_this1.setReserved(path,validated);
		} else {
			_this1.h[path] = validated;
		}
		response.success = true;
		response.body = { breakpoints : validated};
		this.context.protocol.sendResponse(response);
	}
	,getAlreadySetMap: function(path,breakpoints) {
		var res = new haxe_ds_IntMap();
		if(__map_reserved[path] != null ? breakpoints.existsReserved(path) : breakpoints.h.hasOwnProperty(path)) {
			var addedForThisPath = __map_reserved[path] != null ? breakpoints.getReserved(path) : breakpoints.h[path];
			var _g = 0;
			while(_g < addedForThisPath.length) {
				var b = addedForThisPath[_g];
				++_g;
				res.h[b.line] = b;
			}
		}
		return res;
	}
	,getKey: function(path) {
		var res = StringTools.replace(path,"\\","/");
		return res;
	}
});
var vshaxeDebug_commands_StackTrace = function(context,response,args) {
	this.frames = [];
	vshaxeDebug_commands_BaseCommand.call(this,context,response,args);
};
vshaxeDebug_commands_StackTrace.__name__ = true;
vshaxeDebug_commands_StackTrace.__super__ = vshaxeDebug_commands_BaseCommand;
vshaxeDebug_commands_StackTrace.prototype = $extend(vshaxeDebug_commands_BaseCommand.prototype,{
	execute: function() {
		var batch = new vshaxeDebug_CommandsBatch(this.context["debugger"],$bind(this,this.callback));
		if(Lambda.count(this.context.fileNameToFullPathDict) == 0) {
			batch.add(this.cmd.showFiles(),$bind(this,this.processShowFilesResult));
		}
		batch.add(this.cmd.stackTrace(),$bind(this,this.processStackTraceResult));
	}
	,callback: function() {
		this.response.body = { stackFrames : this.frames};
		this.context.onEvent(vshaxeDebug_EStateControlEvent.SetFrames(this.frames));
		this.context.protocol.sendResponse(this.response);
	}
	,processShowFilesResult: function(lines) {
		var sources = this.parser.parseShowFiles(lines);
		var _g = 0;
		while(_g < sources.length) {
			var source = sources[_g];
			++_g;
			var key = source.name;
			var value = source.path;
			var _this = this.context.fileNameToFullPathDict;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,value);
			} else {
				_this.h[key] = value;
			}
		}
		return true;
	}
	,processStackTraceResult: function(lines) {
		var frames = this.parser.parseStackTrace(lines,$bind(this,this.pathProvider));
		this.response.body = { stackFrames : frames};
		this.context.onEvent(vshaxeDebug_EStateControlEvent.SetFrames(frames));
		this.context.protocol.sendResponse(this.response);
		return true;
	}
	,pathProvider: function(fileName) {
		haxe_Log.trace(fileName,{ fileName : "src/vshaxeDebug/commands/StackTrace.hx", lineNumber : 45, className : "vshaxeDebug.commands.StackTrace", methodName : "pathProvider"});
		var _this = this.context.fileNameToFullPathDict;
		haxe_Log.trace(__map_reserved[fileName] != null ? _this.existsReserved(fileName) : _this.h.hasOwnProperty(fileName),{ fileName : "src/vshaxeDebug/commands/StackTrace.hx", lineNumber : 46, className : "vshaxeDebug.commands.StackTrace", methodName : "pathProvider"});
		var _this1 = this.context.fileNameToFullPathDict;
		haxe_Log.trace(__map_reserved[fileName] != null ? _this1.getReserved(fileName) : _this1.h[fileName],{ fileName : "src/vshaxeDebug/commands/StackTrace.hx", lineNumber : 47, className : "vshaxeDebug.commands.StackTrace", methodName : "pathProvider"});
		var _this2 = this.context.fileNameToFullPathDict;
		if(__map_reserved[fileName] != null) {
			return _this2.getReserved(fileName);
		} else {
			return _this2.h[fileName];
		}
	}
});
var vshaxeDebug_commands_Variables = function(context,response,args) {
	vshaxeDebug_commands_BaseCommand.call(this,context,response,args);
};
vshaxeDebug_commands_Variables.__name__ = true;
vshaxeDebug_commands_Variables.__super__ = vshaxeDebug_commands_BaseCommand;
vshaxeDebug_commands_Variables.prototype = $extend(vshaxeDebug_commands_BaseCommand.prototype,{
	execute: function() {
		var id = this.args.variablesReference;
		var handleId = this.context.variableHandles.get(id);
		this.scope = this.getScopeOfHandle(handleId);
		this.result = [];
		var framesDiff = this.getFramesDiff(this.scope);
		var batch = new vshaxeDebug_CommandsBatch(this.context["debugger"],$bind(this,this.callback));
		if(framesDiff != 0) {
			var _g1 = 0;
			var _g = Math.floor(Math.abs(framesDiff));
			while(_g1 < _g) {
				var i = _g1++;
				if(framesDiff < 0) {
					batch.add(this.cmd.frameUp());
				} else {
					batch.add(this.cmd.frameDown());
				}
			}
		}
		var _g2 = this.scope;
		switch(_g2[1]) {
		case 0:
			var frameId = _g2[2];
			var tmp = this.cmd.printLocalVariables();
			var f = $bind(this,this.processResult);
			var parser = ($_=this.parser,$bind($_,$_.parseLocalVariables));
			batch.add(tmp,function(lines) {
				return f(parser,lines);
			});
			var tmp1 = this.cmd.printFunctionArguments();
			var f1 = $bind(this,this.processResult);
			var parser1 = ($_=this.parser,$bind($_,$_.parseFunctionArguments));
			batch.add(tmp1,function(lines1) {
				return f1(parser1,lines1);
			});
			break;
		case 1:
			var frameId1 = _g2[2];
			var tmp2 = this.cmd.printGlobalVariables();
			var f2 = $bind(this,this.processResult);
			var parser2 = ($_=this.parser,$bind($_,$_.parseGlobalVariables));
			batch.add(tmp2,function(lines2) {
				return f2(parser2,lines2);
			});
			break;
		case 2:
			var fameId = _g2[2];
			var tmp3 = this.cmd.printMembers();
			var f3 = $bind(this,this.processResult);
			var parser3 = ($_=this.parser,$bind($_,$_.parseMembers));
			batch.add(tmp3,function(lines3) {
				return f3(parser3,lines3);
			});
			break;
		case 3:
			var name = _g2[3];
			var tmp4 = this.cmd.printObjectProperties(name);
			var f4 = $bind(this,this.processResult);
			var parser4 = ($_=this.parser,$bind($_,$_.parseObjectProperties));
			var parentName = name;
			batch.add(tmp4,function(lines4) {
				return f4(parser4,lines4,parentName);
			});
			break;
		}
	}
	,callback: function() {
		this.response.body = { variables : this.result};
		this.context.protocol.sendResponse(this.response);
	}
	,processResult: function(parser,lines,parentName) {
		if(parentName == null) {
			parentName = "";
		}
		var variableItems = parser(lines);
		var _g = 0;
		while(_g < variableItems.length) {
			var item = variableItems[_g];
			++_g;
			var vRef = 0;
			var varType;
			var _g1 = item.type;
			switch(_g1[1]) {
			case 0:
				var id = _g1[2];
				vRef = this.context.variableHandles.create("object_" + id);
				var this1 = this.context.knownObjects;
				var value = this.joinWithParent(item.name,parentName);
				this1.h[id] = value;
				varType = "Object";
				break;
			case 1:
				var type = _g1[2];
				varType = type;
				break;
			}
			this.result.push({ name : item.name, type : varType, value : item.value, variablesReference : vRef});
		}
		return true;
	}
	,getScopeOfHandle: function(handleId) {
		var parts = handleId.split("_");
		var prefix = parts[0];
		switch(prefix) {
		case "globals":
			return vshaxeDebug_EScope.Global(Std.parseInt(parts[1]));
		case "locals":
			return vshaxeDebug_EScope.Locals(Std.parseInt(parts[1]),1);
		case "members":
			return vshaxeDebug_EScope.Closure(Std.parseInt(parts[1]));
		case "object":
			var objectId = Std.parseInt(parts[1]);
			var objectName = this.context.knownObjects.h[objectId];
			return vshaxeDebug_EScope.ObjectDetails(objectId,objectName);
		default:
			throw new js__$Boot_HaxeError("could not recognize");
		}
	}
	,getFramesDiff: function(scope) {
		var frameId;
		switch(scope[1]) {
		case 0:
			var frameId1 = scope[2];
			frameId = haxe_ds_Option.Some(frameId1);
			break;
		case 1:
			var frameId2 = scope[2];
			frameId = haxe_ds_Option.Some(frameId2);
			break;
		case 2:
			var frameId3 = scope[2];
			frameId = haxe_ds_Option.Some(frameId3);
			break;
		default:
			frameId = haxe_ds_Option.None;
		}
		var currentFrame;
		var _g = this.context.debuggerState;
		if(_g[1] == 3) {
			var currentFrame1 = _g[3];
			var frames = _g[2];
			currentFrame = haxe_ds_Option.Some(currentFrame1);
		} else {
			currentFrame = haxe_ds_Option.None;
		}
		if(frameId[1] == 0) {
			if(currentFrame[1] == 0) {
				var requestedFrame = frameId[2];
				var currentFrame2 = currentFrame[2];
				return currentFrame2 - requestedFrame;
			} else {
				return 0;
			}
		} else {
			return 0;
		}
	}
	,joinWithParent: function(name,parentName) {
		if(parentName == "") {
			return name;
		}
		if(Std.parseInt(name) != null) {
			return "" + parentName + "[" + name + "]";
		} else {
			return "" + parentName + "." + name;
		}
	}
});
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
fdbAdapter_Adapter.main();
})();
