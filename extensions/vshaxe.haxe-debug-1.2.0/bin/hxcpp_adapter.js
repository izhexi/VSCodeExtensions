// Generated by Haxe 4.0.0 (git build development @ dcf4e8a)
if (typeof process !== "undefined") if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");

(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Sys = function() { };
Sys.__name__ = true;
Sys.environment = function() {
	var m = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = Reflect.fields(process.env);
	while(_g < _g1.length) {
		var key = _g1[_g];
		++_g;
		var v = process.env[key];
		if(__map_reserved[key] != null) {
			m.setReserved(key,v);
		} else {
			m.h[key] = v;
		}
	}
	return m;
};
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = true;
var _$Sys_FileOutput = function(fd) {
	this.fd = fd;
};
_$Sys_FileOutput.__name__ = true;
_$Sys_FileOutput.__super__ = haxe_io_Output;
_$Sys_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		js_node_Fs.writeSync(this.fd,String.fromCharCode(c));
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		return js_node_Fs.writeSync(this.fd,new js_node_buffer_Buffer(data.buffer,data.byteOffset,data.byteLength),pos,len);
	}
	,writeString: function(s) {
		js_node_Fs.writeSync(this.fd,s);
	}
	,flush: function() {
		js_node_Fs.fsyncSync(this.fd);
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: _$Sys_FileOutput
});
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
var _$Sys_FileInput = function(fd) {
	this.fd = fd;
};
_$Sys_FileInput.__name__ = true;
_$Sys_FileInput.__super__ = haxe_io_Input;
_$Sys_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		var buf = new js_node_buffer_Buffer(1);
		try {
			js_node_Fs.readSync(this.fd,buf,0,1,null);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if(e.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e));
			}
		}
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = new js_node_buffer_Buffer(data.buffer,data.byteOffset,data.byteLength);
		try {
			return js_node_Fs.readSync(this.fd,buf,pos,len,null);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if(e.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e));
			}
		}
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: _$Sys_FileInput
});
var adapter_DebugSession = require("vscode-debugadapter").DebugSession;
var adapter_Source = require("vscode-debugadapter").Source;
var adapter_Scope = require("vscode-debugadapter").Scope;
var adapter_Thread = require("vscode-debugadapter").Thread;
var adapter_Breakpoint = require("vscode-debugadapter").Breakpoint;
var adapter_StoppedEvent = require("vscode-debugadapter").StoppedEvent;
var adapter_InitializedEvent = require("vscode-debugadapter").InitializedEvent;
var adapter_TerminatedEvent = require("vscode-debugadapter").TerminatedEvent;
var adapter_OutputEvent = require("vscode-debugadapter").OutputEvent;
var adapter_Handles = require("vscode-debugadapter").Handles;
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.trace = function(v,infos) {
	var msg = infos != null ? infos.fileName + ":" + infos.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(infos != null && infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(msg);
	}
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_Option = { __ename__ : true, __constructs__ : ["Some","None"] };
haxe_ds_Option.Some = function(v) { var $x = ["Some",0,v]; $x.__enum__ = haxe_ds_Option; $x.toString = $estr; return $x; };
haxe_ds_Option.None = ["None",1];
haxe_ds_Option.None.toString = $estr;
haxe_ds_Option.None.__enum__ = haxe_ds_Option;
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var keys = this.arrayKeys();
		var _g1 = 0;
		var _g = keys.length;
		while(_g1 < _g) {
			var i = _g1++;
			var k = keys[i];
			s_b += k == null ? "null" : "" + k;
			s_b += " => ";
			s_b += Std.string(Std.string(__map_reserved[k] != null ? this.getReserved(k) : this.h[k]));
			if(i < keys.length - 1) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	__class__: haxe_io_Bytes
};
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.__name__ = true;
haxe_io_Path.withoutDirectory = function(path) {
	var s = new haxe_io_Path(path);
	s.dir = null;
	return s.toString();
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var vshaxeDebug_BaseAdapter = function(obsolete_debuggerLinesAndColumnsStartAt1,obsolete_isServer) {
	this.terminated = false;
	adapter_DebugSession.call(this,obsolete_debuggerLinesAndColumnsStartAt1,obsolete_isServer);
};
vshaxeDebug_BaseAdapter.__name__ = true;
vshaxeDebug_BaseAdapter.__super__ = adapter_DebugSession;
vshaxeDebug_BaseAdapter.prototype = $extend(adapter_DebugSession.prototype,{
	dispatchRequest: function(request) {
		this.traceJson(request);
		adapter_DebugSession.prototype.dispatchRequest.call(this,request);
	}
	,sendResponse: function(response) {
		haxe_Log.trace("sendResponse: " + Std.string(response),{ fileName : "BaseAdapter.hx", lineNumber : 25, className : "vshaxeDebug.BaseAdapter", methodName : "sendResponse"});
		adapter_DebugSession.prototype.sendResponse.call(this,response);
	}
	,createContext: function(program) {
		throw new js__$Boot_HaxeError("abstract method createContext - implement me");
	}
	,initializeRequest: function(response,args) {
		response.body.supportsConfigurationDoneRequest = true;
		response.body.supportsEvaluateForHovers = true;
		response.body.supportsStepBack = false;
		this.sendResponse(response);
	}
	,setBreakPointsRequest: function(response,args) {
		var _gthis = this;
		this.context.pathProvider.initWait(function() {
			var command = new vshaxeDebug_commands_SetBreakpoints(_gthis.context,response,args);
			command.execute();
		});
	}
	,configurationDoneRequest: function(response,args) {
		this["debugger"].queueSend(this.cmd.continueCommand());
		this.context.onEvent(vshaxeDebug_EStateControlEvent.Continue);
		this.sendResponse(response);
	}
	,threadsRequest: function(response) {
		response.body = { threads : [new adapter_Thread(1,"thread 1")]};
		this.sendResponse(response);
	}
	,stackTraceRequest: function(response,args) {
		var _gthis = this;
		this.context.pathProvider.initWait(function() {
			var command = new vshaxeDebug_commands_StackTrace(_gthis.context,response,args);
			command.execute();
		});
	}
	,evaluateRequest: function(response,args) {
		if(this.context == null) {
			this.sendResponse(response);
			return;
		}
		var _g = this.context.debuggerState;
		if(_g[1] == 3) {
			var command = new vshaxeDebug_commands_Evaluate(this.context,response,args);
			command.execute();
		} else {
			this.sendResponse(response);
		}
	}
	,stepInRequest: function(response,args) {
		this.stepRequest(this.cmd.stepIn(),response);
	}
	,stepOutRequest: function(response,args) {
		this.stepRequest(this.cmd.stepOut(),response);
	}
	,nextRequest: function(response,args) {
		this.stepRequest(this.cmd.next(),response);
	}
	,stepRequest: function(cmd,response) {
		var _gthis = this;
		this["debugger"].queueSend(cmd,function(_) {
			_gthis.sendResponse(response);
			_gthis.sendEvent(new adapter_StoppedEvent("step",1));
			return true;
		});
	}
	,continueRequest: function(response,args) {
		this["debugger"].queueSend(this.cmd.continueCommand());
		this.sendResponse(response);
		this.context.onEvent(vshaxeDebug_EStateControlEvent.Continue);
	}
	,pauseRequest: function(response,args) {
		var _gthis = this;
		this["debugger"].queueSend(this.cmd.pause(),function(_) {
			_gthis.sendResponse(response);
			_gthis.context.onEvent(vshaxeDebug_EStateControlEvent.Stop("pause"));
			return true;
		});
	}
	,disconnectRequest: function(response,args) {
		var _gthis = this;
		if(this.terminated) {
			this.sendResponse(response);
			return;
		}
		this["debugger"].queueSend(this.cmd.disconnect(),function(_) {
			_gthis.sendResponse(response);
			return true;
		});
	}
	,traceJson: function(value) {
		haxe_Log.trace(JSON.stringify(value),{ fileName : "BaseAdapter.hx", lineNumber : 129, className : "vshaxeDebug.BaseAdapter", methodName : "traceJson"});
	}
	,redirectTraceToDebugConsole: function(context) {
		haxe_Log.trace = function(v,i) {
			context.sendToOutput("DebugAdapter: " + v,"stdout");
		};
	}
	,__class__: vshaxeDebug_BaseAdapter
});
var hxcppAdapter_Adapter = function(obsolete_debuggerLinesAndColumnsStartAt1,obsolete_isServer) {
	vshaxeDebug_BaseAdapter.call(this,obsolete_debuggerLinesAndColumnsStartAt1,obsolete_isServer);
};
hxcppAdapter_Adapter.__name__ = true;
hxcppAdapter_Adapter.main = function() {
	hxcppAdapter_Adapter.setupTrace();
	adapter_DebugSession.run(hxcppAdapter_Adapter);
};
hxcppAdapter_Adapter.setupTrace = function() {
	haxe_Log.trace = function(v,i) {
		var r_0 = Std.string(v);
	};
};
hxcppAdapter_Adapter.__super__ = vshaxeDebug_BaseAdapter;
hxcppAdapter_Adapter.prototype = $extend(vshaxeDebug_BaseAdapter.prototype,{
	launchRequest: function(response,args) {
		var customArgs = args;
		this.context = this.createContext(customArgs.program);
		this["debugger"] = this.context["debugger"];
		this.parser = this.context["debugger"].parser;
		this.cmd = this.context["debugger"].commandBuilder;
		if(customArgs.receiveAdapterOutput != null && customArgs.receiveAdapterOutput) {
			this.redirectTraceToDebugConsole(this.context);
		}
		var launchCommand = new hxcppAdapter_commands_Launch(this.context,response,customArgs);
		launchCommand.execute();
	}
	,attachRequest: function(response,args) {
		throw new js__$Boot_HaxeError("adapter doesn't support attach");
	}
	,variablesRequest: function(response,args) {
		var command = new hxcppAdapter_commands_Variables(this.context,response,args);
		command.execute();
	}
	,scopesRequest: function(response,args) {
		var frameId = args.frameId;
		var scopes = [new adapter_Scope("Locals",this.context.variableHandles.create("locals_" + frameId),false),new adapter_Scope("Members",this.context.variableHandles.create("members_" + frameId),false)];
		response.body = { scopes : scopes};
		this.sendResponse(response);
	}
	,createContext: function(program) {
		var scriptPath = __dirname;
		var commandBuilder = new hxcppAdapter_CommandBuilder();
		var eolSign = vshaxeDebug_PlatformParameters.getEndOfLineSign();
		var parser = new hxcppAdapter_Parser(eolSign);
		var cliAdapterConfig = { cmd : program, cmdParams : ["-DHXCPP_DEBUGGER"], onPromptGot : $bind(this,this.onPromptGot), onError : function(error) {
			return "Could not start debugable process.";
		}, allOutputReceiver : $bind(this,this.allOutputReceiver), commandBuilder : commandBuilder, parser : parser};
		this["debugger"] = new vshaxeDebug_CLIAdapter(cliAdapterConfig);
		this["debugger"].start();
		return new vshaxeDebug_Context(this,this["debugger"],new hxcppAdapter_PathProvider(this["debugger"]));
	}
	,onPromptGot: function(lines) {
	}
	,allOutputReceiver: function(rawInput) {
		var proceed = false;
		if(this.parser.isExitMatched(rawInput)) {
			var event = new adapter_TerminatedEvent(false);
			this.traceJson(event);
			this.sendEvent(event);
			this.terminated = true;
			this["debugger"].stop();
			return true;
		}
		var _g = this.context.debuggerState;
		switch(_g[1]) {
		case 0:
			if(this.parser.isGreetingMatched(rawInput)) {
				this.context.pathProvider.init();
				this.context.onEvent(vshaxeDebug_EStateControlEvent.GreetingReceived);
				proceed = true;
			}
			break;
		case 2:
			if(this.parser.isStopOnBreakpointMatched(rawInput)) {
				this.context.onEvent(vshaxeDebug_EStateControlEvent.Stop("breakpoint"));
				proceed = true;
			} else if(this.parser.isStopOnExceptionMatched(rawInput)) {
				this.context.onEvent(vshaxeDebug_EStateControlEvent.Stop("exception"));
				proceed = true;
			} else {
				var lines = this.parser.getTraces(rawInput);
				var _g1 = 0;
				while(_g1 < lines.length) {
					var line = lines[_g1];
					++_g1;
					this.context.sendToOutput(line);
					proceed = true;
				}
			}
			break;
		default:
		}
		return proceed;
	}
	,__class__: hxcppAdapter_Adapter
});
var vshaxeDebug_ICommandBuilder = function() { };
vshaxeDebug_ICommandBuilder.__name__ = true;
vshaxeDebug_ICommandBuilder.prototype = {
	__class__: vshaxeDebug_ICommandBuilder
};
var hxcppAdapter_CommandBuilder = function() {
};
hxcppAdapter_CommandBuilder.__name__ = true;
hxcppAdapter_CommandBuilder.__interfaces__ = [vshaxeDebug_ICommandBuilder];
hxcppAdapter_CommandBuilder.prototype = {
	launch: function(program) {
		return "";
	}
	,frameUp: function() {
		return "up";
	}
	,frameDown: function() {
		return "down";
	}
	,stepIn: function() {
		return "step";
	}
	,stepOut: function() {
		return "finish";
	}
	,next: function() {
		return "next";
	}
	,continueCommand: function() {
		return "c";
	}
	,pause: function() {
		return "\ny";
	}
	,stackTrace: function() {
		return "w";
	}
	,addBreakpoint: function(path,line) {
		return "break " + path + ":" + line;
	}
	,removeBreakpoint: function(path,line) {
		return "clear " + path + ":" + line;
	}
	,printLocalVariables: function() {
		return "variables";
	}
	,printFunctionArguments: function() {
		return "";
	}
	,printGlobalVariables: function() {
		return "";
	}
	,printObjectProperties: function(objectName) {
		return "print " + objectName;
	}
	,printMembers: function() {
		return "print this";
	}
	,evaluate: function(expr) {
		return "print " + expr;
	}
	,disconnect: function() {
		return "exit";
	}
	,__class__: hxcppAdapter_CommandBuilder
};
var vshaxeDebug_IParser = function() { };
vshaxeDebug_IParser.__name__ = true;
vshaxeDebug_IParser.prototype = {
	__class__: vshaxeDebug_IParser
};
var hxcppAdapter_Parser = function(eolSign) {
	this.eolSign = eolSign;
	this.promptLength = 0;
};
hxcppAdapter_Parser.__name__ = true;
hxcppAdapter_Parser.__interfaces__ = [vshaxeDebug_IParser];
hxcppAdapter_Parser.prototype = {
	parseFunctionArguments: function(lines) {
		return [];
	}
	,parseGlobalVariables: function(lines) {
		return [];
	}
	,parseLocalVariables: function(lines) {
		return [];
	}
	,parseMembers: function(lines) {
		return [];
	}
	,parseObjectProperties: function(lines) {
		return [];
	}
	,parseEvaluate: function(lines) {
		return haxe_ds_Option.None;
	}
	,parseStackTrace: function(lines,pathProvider) {
		var result = [];
		var rMethod = new EReg("([0-9]+) : (.+) at (.*):([0-9]+).*","");
		var anonFunction = new EReg("#([0-9]+)\\s+this = \\[Function [0-9]+, name='(.*)'\\]\\.([a-zA-Z0-9/\\$<>]+).*\\) at (.*):([0-9]+).*","");
		var globalCall = new EReg("([0-9]+) : (.+) at \\?:([0-9]+).*","");
		var id = 0;
		var _g = 0;
		while(_g < lines.length) {
			var l = lines[_g];
			++_g;
			if(globalCall.match(l)) {
				result.push({ id : id++, name : globalCall.matched(2), line : Std.parseInt(globalCall.matched(3)), source : { path : "global", name : "global"}, column : 0});
			} else if(rMethod.match(l)) {
				var path = rMethod.matched(3);
				var splited = path.split("/");
				var name = splited.pop();
				result.push({ id : id++, name : rMethod.matched(2), line : Std.parseInt(rMethod.matched(4)), source : { name : name, path : pathProvider(name)}, column : 0});
			} else if(anonFunction.match(l)) {
				result.push({ id : id++, name : anonFunction.matched(2) + "." + anonFunction.matched(3), line : Std.parseInt(anonFunction.matched(5)), source : { name : anonFunction.matched(4), path : pathProvider(anonFunction.matched(4))}, column : 0});
			}
		}
		return result;
	}
	,parseAddBreakpoint: function(lines) {
		var result = haxe_ds_Option.None;
		var breakpointData = lines[0];
		var r = new EReg("Breakpoint ([0-9]+) set and enabled(.*)","");
		if(r.match(breakpointData)) {
			result = haxe_ds_Option.Some({ id : Std.parseInt(r.matched(1)), lineInfo : haxe_ds_Option.None});
		}
		return result;
	}
	,getLines: function(rawInput) {
		var _g = [];
		var _g1 = 0;
		var _g2 = rawInput.split(this.eolSign);
		while(_g1 < _g2.length) {
			var line = _g2[_g1];
			++_g1;
			if(line != "") {
				_g.push(line);
			}
		}
		return _g;
	}
	,getLinesExceptPrompt: function(rawInput) {
		var withoutPrompt = rawInput.substring(0,rawInput.length - this.promptLength);
		var lines = this.getLines(withoutPrompt);
		return lines;
	}
	,getTraces: function(rawInput) {
		if(HxOverrides.cca(rawInput,rawInput.length - 1) != 10) {
			return [];
		}
		var result = [];
		var lines = this.getLines(rawInput);
		var traceR = new EReg("^.*\\.hx:\\d+:.*$","");
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			if(traceR.match(line)) {
				result.push(line);
			}
		}
		return result;
	}
	,isPromptMatched: function(rawInput) {
		var lines = this.getLines(rawInput);
		var promptR = new EReg("^(\\d+>\\s)$","");
		var result = false;
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			if(promptR.match(line)) {
				var prompt = promptR.matched(1);
				this.promptLength = prompt.length;
				result = true;
			}
		}
		return result;
	}
	,isExitMatched: function(rawInput) {
		return false;
	}
	,isGreetingMatched: function(rawInput) {
		var greetingRegex = new EReg("1>(.*)","");
		var result = greetingRegex.match(rawInput);
		return result;
	}
	,isStopOnBreakpointMatched: function(rawInput) {
		var lines = this.getLines(rawInput);
		var regexp = new EReg("Thread (\\d+) stopped in (.*) at (.+\\.hx):(\\d+)\\.","");
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			if(regexp.match(line)) {
				return true;
			}
		}
		return false;
	}
	,isStopOnExceptionMatched: function(rawInput) {
		var lines = this.getLines(rawInput);
		return false;
	}
	,__class__: hxcppAdapter_Parser
};
var vshaxeDebug_IPathProvider = function() { };
vshaxeDebug_IPathProvider.__name__ = true;
vshaxeDebug_IPathProvider.prototype = {
	__class__: vshaxeDebug_IPathProvider
};
var hxcppAdapter_PathProvider = function($debugger) {
	this["debugger"] = $debugger;
	this.initWaiting = [];
	this.nameToAbsPath = new haxe_ds_StringMap();
	this.nameToWorkspacePath = new haxe_ds_StringMap();
	this.loaded = false;
};
hxcppAdapter_PathProvider.__name__ = true;
hxcppAdapter_PathProvider.__interfaces__ = [vshaxeDebug_IPathProvider];
hxcppAdapter_PathProvider.prototype = {
	init: function() {
		this["debugger"].queueSend("files",$bind(this,this.processWorkspaceFilesResult));
		this["debugger"].queueSend("filespath",$bind(this,this.processAbsFilesResult));
	}
	,initWait: function(callback) {
		if(this.loaded) {
			callback();
		} else {
			this.initWaiting.push(callback);
		}
	}
	,forBreakpointSetting: function(fileName) {
		haxe_Log.trace(fileName,{ fileName : "PathProvider.hx", lineNumber : 40, className : "hxcppAdapter.PathProvider", methodName : "forBreakpointSetting"});
		haxe_Log.trace(this.nameToWorkspacePath.toString(),{ fileName : "PathProvider.hx", lineNumber : 41, className : "hxcppAdapter.PathProvider", methodName : "forBreakpointSetting"});
		var _this = this.nameToWorkspacePath;
		if(__map_reserved[fileName] != null) {
			return _this.getReserved(fileName);
		} else {
			return _this.h[fileName];
		}
	}
	,forEditor: function(fileName) {
		var _this = this.nameToAbsPath;
		if(__map_reserved[fileName] != null) {
			return _this.getReserved(fileName);
		} else {
			return _this.h[fileName];
		}
	}
	,parseFiles: function(lines) {
		var result = [];
		var rRow = new EReg("^(.)*\\.hx$","");
		var _g = 0;
		while(_g < lines.length) {
			var l = lines[_g];
			++_g;
			if(rRow.match(l)) {
				var splited = l.split("/");
				var name = splited.pop();
				var path = l;
				result.push({ name : name, path : path});
			}
		}
		return result;
	}
	,parseFilesPath: function(lines) {
		var result = [];
		var rRow = new EReg("^(.)*\\.hx$","");
		var pathSplitter = vshaxeDebug_PlatformParameters.getPathSlashSign();
		var _g = 0;
		while(_g < lines.length) {
			var l = lines[_g];
			++_g;
			if(rRow.match(l)) {
				var splited = l.split(pathSplitter);
				var name = splited.pop();
				var path = l;
				result.push({ name : name, path : path});
			}
		}
		return result;
	}
	,processWorkspaceFilesResult: function(lines) {
		var sources = this.parseFiles(lines);
		var _g = 0;
		while(_g < sources.length) {
			var source = sources[_g];
			++_g;
			var key = source.name;
			var value = source.path;
			var _this = this.nameToWorkspacePath;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,value);
			} else {
				_this.h[key] = value;
			}
		}
		return true;
	}
	,processAbsFilesResult: function(lines) {
		var sources = this.parseFilesPath(lines);
		var _g = 0;
		while(_g < sources.length) {
			var source = sources[_g];
			++_g;
			var key = source.name;
			var value = source.path;
			var _this = this.nameToAbsPath;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,value);
			} else {
				_this.h[key] = value;
			}
		}
		this.loaded = true;
		var _g1 = 0;
		var _g11 = this.initWaiting;
		while(_g1 < _g11.length) {
			var callback = _g11[_g1];
			++_g1;
			callback();
		}
		this.initWaiting = [];
		return true;
	}
	,__class__: hxcppAdapter_PathProvider
};
var vshaxeDebug_commands_BaseCommand = function(context,response,args) {
	this.context = context;
	this["debugger"] = context["debugger"];
	this.response = response;
	this.args = args;
	this.cmd = this["debugger"].commandBuilder;
	this.parser = this["debugger"].parser;
};
vshaxeDebug_commands_BaseCommand.__name__ = true;
vshaxeDebug_commands_BaseCommand.prototype = {
	execute: function() {
	}
	,__class__: vshaxeDebug_commands_BaseCommand
};
var hxcppAdapter_commands_Launch = function(context,response,args) {
	vshaxeDebug_commands_BaseCommand.call(this,context,response,args);
};
hxcppAdapter_commands_Launch.__name__ = true;
hxcppAdapter_commands_Launch.__super__ = vshaxeDebug_commands_BaseCommand;
hxcppAdapter_commands_Launch.prototype = $extend(vshaxeDebug_commands_BaseCommand.prototype,{
	execute: function() {
		var program = this.args.program;
		if(!vshaxeDebug_PathUtils.isAbsolutePath(program)) {
			if(!vshaxeDebug_PathUtils.isOnPath(program)) {
				this.context.sendError(this.response,"Cannot find runtime " + program + " on PATH.");
				this.context.protocol.sendResponse(this.response);
				return;
			}
		} else if(!js_node_Fs.existsSync(program)) {
			this.response.success = false;
			this.response.message = "Cannot find " + program;
			this.context.protocol.sendResponse(this.response);
			return;
		}
		this.context.sendToOutput("running " + program,"stdout");
	}
	,__class__: hxcppAdapter_commands_Launch
});
var hxcppAdapter_commands_Variables = function(context,response,args) {
	vshaxeDebug_commands_BaseCommand.call(this,context,response,args);
};
hxcppAdapter_commands_Variables.__name__ = true;
hxcppAdapter_commands_Variables.__super__ = vshaxeDebug_commands_BaseCommand;
hxcppAdapter_commands_Variables.prototype = $extend(vshaxeDebug_commands_BaseCommand.prototype,{
	execute: function() {
		var _gthis = this;
		var id = this.args.variablesReference;
		var handleId = this.context.variableHandles.get(id);
		this.scope = this.getScopeOfHandle(handleId);
		this.result = [];
		var framesDiff = this.getFramesDiff(this.scope);
		this.batch = new vshaxeDebug_CommandsBatch(this.context["debugger"],$bind(this,this.callback));
		if(framesDiff != 0) {
			var _g1 = 0;
			var _g = Math.floor(Math.abs(framesDiff));
			while(_g1 < _g) {
				var i = _g1++;
				if(framesDiff < 0) {
					this.batch.add("up",$bind(this,this.onFrameUp));
				} else {
					this.batch.add("down",$bind(this,this.onFrameDown));
				}
			}
		}
		var _g2 = this.scope;
		switch(_g2[1]) {
		case 0:
			var frameId = _g2[2];
			this.batch.add("variables",$bind(this,this.processVariablesNames));
			break;
		case 1:
			var frameId1 = _g2[2];
			break;
		case 2:
			var fameId = _g2[2];
			var f = $bind(this,this.processResult);
			var parser = $bind(this,this.parseObjectDetails);
			var tmp = function(lines) {
				return f(parser,lines);
			};
			this.batch.add(this.printCmd("this"),tmp);
			break;
		case 3:
			var type = _g2[4];
			var name = _g2[3];
			if(type == "Anonymous") {
				var f1 = $bind(this,this.processResult);
				var parser1 = $bind(this,this.parseObjectDetails);
				var parentName = name;
				var tmp1 = function(lines1) {
					return f1(parser1,lines1,parentName);
				};
				this.batch.add(this.printCmd(name),tmp1);
			} else if(type == "Array") {
				var f2 = $bind(this,this.processResult);
				var parser2 = function(lines2) {
					var parser3 = lines2.join("");
					return _gthis.parseArray(parser3);
				};
				var parentName1 = name;
				var tmp2 = function(lines3) {
					return f2(parser2,lines3,parentName1);
				};
				this.batch.add(this.printCmd(name),tmp2);
			} else {
				var f3 = $bind(this,this.processResult);
				var parser4 = $bind(this,this.parseObjectDetails);
				var parentName2 = name;
				var tmp3 = function(lines4) {
					return f3(parser4,lines4,parentName2);
				};
				this.batch.add(this.printCmd(name),tmp3);
			}
			break;
		}
	}
	,onFrameUp: function(lines) {
		this.context.onEvent(vshaxeDebug_EStateControlEvent.FrameUp);
		return true;
	}
	,onFrameDown: function(lines) {
		this.context.onEvent(vshaxeDebug_EStateControlEvent.FrameDown);
		return true;
	}
	,callback: function() {
		this.response.body = { variables : this.result};
		this.context.protocol.sendResponse(this.response);
	}
	,processVariablesNames: function(lines) {
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			if(line != "this") {
				this.batch.add(this.printCmd(line),(function(parser,f) {
					return function(lines1) {
						return f[0](parser[0],lines1);
					};
				})([$bind(this,this.parseVariables)],[$bind(this,this.processResult)]));
			}
		}
		return true;
	}
	,processResult: function(parser,lines,parentName) {
		if(parentName == null) {
			parentName = "";
		}
		var variableItems = parser(lines);
		var _g = 0;
		while(_g < variableItems.length) {
			var item = variableItems[_g];
			++_g;
			var vRef = 0;
			var varType;
			var _g1 = item.type;
			switch(_g1[1]) {
			case 0:
				var type = _g1[3];
				var id = _g1[2];
				vRef = this.context.variableHandles.create("" + type + "_" + id);
				var this1 = this.context.knownObjects;
				var value = this.joinWithParent(item.name,parentName);
				this1.h[id] = value;
				varType = type;
				break;
			case 1:
				var type1 = _g1[2];
				varType = type1;
				break;
			}
			this.result.push({ name : item.name, type : varType, value : item.value, variablesReference : vRef});
		}
		return true;
	}
	,printCmd: function(name) {
		return "print " + name;
	}
	,parseObjectDetails: function(lines) {
		var result = [];
		lines.shift();
		lines.pop();
		var waitForCurlyBreakEnd = false;
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			line = StringTools.trim(line);
			if(waitForCurlyBreakEnd) {
				if(line == "}") {
					waitForCurlyBreakEnd = false;
				}
			} else {
				var itemMaybe = this.parseVariable(line);
				if(itemMaybe[1] == 0) {
					var item = itemMaybe[2];
					var _g1 = item.type;
					if(_g1[1] == 0) {
						if(_g1[3] == "Anonymous") {
							waitForCurlyBreakEnd = true;
						}
					}
					result.push(item);
				}
			}
		}
		return result;
	}
	,parseVariables: function(lines) {
		var result = [];
		var firstLine = lines.shift();
		var _g = this.parseVariable(firstLine);
		if(_g[1] == 0) {
			var item = _g[2];
			result.push(item);
		}
		return result;
	}
	,parseVariable: function(line) {
		var result = haxe_ds_Option.None;
		var regExp = new EReg("^(.*)[=|:](.*)$","");
		if(regExp.match(line)) {
			var left = StringTools.trim(regExp.matched(1));
			var parts = left.split(":");
			var varName = StringTools.trim(parts[0]);
			var varType = parts.length > 1 ? StringTools.trim(parts[1]) : "";
			var varVal = StringTools.trim(regExp.matched(2));
			result = haxe_ds_Option.Some(this.createVariableItem(varName,varType,varVal));
		}
		return result;
	}
	,parseArray: function(line) {
		var result = [];
		var leftRegExp = new EReg("^(.*):(.*)$","");
		var leftEndIndex = line.indexOf("=");
		var left = HxOverrides.substr(line,0,leftEndIndex);
		var right = HxOverrides.substr(line,leftEndIndex + 1,line.length);
		if(leftRegExp.match(left)) {
			var varType = StringTools.trim(leftRegExp.matched(2));
			var varVal = StringTools.trim(right);
			var items = this.extractLevel1ArrayItems(varVal);
			var i = 0;
			var _g = 0;
			while(_g < items.length) {
				var item = items[_g];
				++_g;
				result.push(this.createVariableItem("" + i,varType,StringTools.trim(item)));
				++i;
			}
		}
		return result;
	}
	,extractLevel1ArrayItems: function(arraySerialized) {
		var level = 0;
		var index = 0;
		var onLevel1 = "";
		while(index < arraySerialized.length) {
			var $char = arraySerialized.charAt(index);
			var isLevel1Char = false;
			if($char == "[" || $char == "{") {
				isLevel1Char = level == 1;
				++level;
			} else if($char == "]" || $char == "}") {
				--level;
				isLevel1Char = level == 1;
			} else {
				isLevel1Char = level == 1;
			}
			if(isLevel1Char) {
				onLevel1 += $char;
			}
			++index;
		}
		return onLevel1.split(",");
	}
	,createVariableItem: function(name,type,value) {
		var resultValue = value;
		var resultType;
		if(StringTools.startsWith(value,"{")) {
			resultValue = "Object";
			resultType = vshaxeDebug_VariableType.Deep(hxcppAdapter_commands_Variables.increment++,"Anonymous");
		} else if(StringTools.startsWith(value,"[")) {
			resultValue = "Array";
			resultType = vshaxeDebug_VariableType.Deep(hxcppAdapter_commands_Variables.increment++,"Array");
		} else if(StringTools.startsWith(value,"\"")) {
			resultType = vshaxeDebug_VariableType.Simple("String");
		} else if(value == "" && type != "") {
			resultType = vshaxeDebug_VariableType.Deep(hxcppAdapter_commands_Variables.increment++,type);
		} else if(value == "..." && type != "") {
			resultValue = "Object";
			resultType = vshaxeDebug_VariableType.Deep(hxcppAdapter_commands_Variables.increment++,type);
		} else {
			resultType = vshaxeDebug_VariableType.Simple(type);
		}
		return { name : name, type : resultType, value : resultValue};
	}
	,getScopeOfHandle: function(handleId) {
		var parts = handleId.split("_");
		var prefix = parts[0];
		switch(prefix) {
		case "globals":
			return vshaxeDebug_EScope.Global(Std.parseInt(parts[1]));
		case "locals":
			return vshaxeDebug_EScope.Locals(Std.parseInt(parts[1]),1);
		case "members":
			return vshaxeDebug_EScope.Closure(Std.parseInt(parts[1]));
		default:
			var deepObjectType = prefix;
			var objectId = Std.parseInt(parts[1]);
			var objectName = this.context.knownObjects.h[objectId];
			return vshaxeDebug_EScope.ObjectDetails(objectId,objectName,deepObjectType);
		}
	}
	,getFramesDiff: function(scope) {
		var frameId;
		switch(scope[1]) {
		case 0:
			var frameId1 = scope[2];
			frameId = haxe_ds_Option.Some(frameId1);
			break;
		case 1:
			var frameId2 = scope[2];
			frameId = haxe_ds_Option.Some(frameId2);
			break;
		case 2:
			var frameId3 = scope[2];
			frameId = haxe_ds_Option.Some(frameId3);
			break;
		default:
			frameId = haxe_ds_Option.None;
		}
		var currentFrame;
		var _g = this.context.debuggerState;
		if(_g[1] == 3) {
			var currentFrame1 = _g[3];
			var frames = _g[2];
			currentFrame = haxe_ds_Option.Some(currentFrame1);
		} else {
			currentFrame = haxe_ds_Option.None;
		}
		if(frameId[1] == 0) {
			if(currentFrame[1] == 0) {
				var requestedFrame = frameId[2];
				var currentFrame2 = currentFrame[2];
				return currentFrame2 - requestedFrame;
			} else {
				return 0;
			}
		} else {
			return 0;
		}
	}
	,joinWithParent: function(name,parentName) {
		if(parentName == "") {
			return name;
		}
		if(Std.parseInt(name) != null) {
			return "" + parentName + "[" + name + "]";
		} else {
			return "" + parentName + "." + name;
		}
	}
	,__class__: hxcppAdapter_commands_Variables
});
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_ChildProcess = require("child_process");
var js_node_Fs = require("fs");
var js_node_Path = require("path");
var js_node_buffer_Buffer = require("buffer").Buffer;
var vshaxeDebug__$CLIAdapter_DebuggerCommand = function(cmd,resultReceiver) {
	this.cmd = cmd;
	this.resultReceiver = resultReceiver;
	this.done = false;
};
vshaxeDebug__$CLIAdapter_DebuggerCommand.__name__ = true;
vshaxeDebug__$CLIAdapter_DebuggerCommand.prototype = {
	execute: function(inputHandle) {
		inputHandle(this.cmd);
		if(this.resultReceiver == null) {
			this.setDone();
		}
	}
	,processResult: function(lines) {
		if(this.resultReceiver(lines)) {
			this.setDone();
		}
	}
	,setDone: function() {
		this.done = true;
	}
	,__class__: vshaxeDebug__$CLIAdapter_DebuggerCommand
};
var vshaxeDebug_IDebugger = function() { };
vshaxeDebug_IDebugger.__name__ = true;
vshaxeDebug_IDebugger.prototype = {
	__class__: vshaxeDebug_IDebugger
};
var vshaxeDebug_CLIAdapter = function(config) {
	this.config = config;
	this.onPromptGot = config.onPromptGot;
	this.onError = config.onError;
	this.allOutputReceiver = config.allOutputReceiver;
	this.commandBuilder = config.commandBuilder;
	this.parser = config.parser;
	this.buffer = new js_node_buffer_Buffer(0);
};
vshaxeDebug_CLIAdapter.__name__ = true;
vshaxeDebug_CLIAdapter.__interfaces__ = [vshaxeDebug_IDebugger];
vshaxeDebug_CLIAdapter.prototype = {
	start: function() {
		var env = { };
		var k = Sys.environment().keys();
		while(k.hasNext()) {
			var k1 = k.next();
			env[k1] = process.env[k1];
		}
		this.proc = js_node_ChildProcess.spawn(this.config.cmd,this.config.cmdParams,{ env : env});
		this.proc.stdout.on("data",$bind(this,this.onData));
		this.proc.stderr.on("data",function(buf) {
			haxe_Log.trace(buf.toString(),{ fileName : "CLIAdapter.hx", lineNumber : 86, className : "vshaxeDebug.CLIAdapter", methodName : "start"});
		});
	}
	,stop: function() {
		this.proc.kill("SIGINT");
	}
	,queueSend: function(command,callback) {
		haxe_Log.trace("queueSend: " + command,{ fileName : "CLIAdapter.hx", lineNumber : 94, className : "vshaxeDebug.CLIAdapter", methodName : "queueSend"});
		var cmd = new vshaxeDebug__$CLIAdapter_DebuggerCommand(command,callback);
		this.queueCommand(cmd);
	}
	,queueCommand: function(command) {
		if(this.queueHead == null) {
			this.queueHead = this.queueTail = command;
		} else {
			this.queueTail.next = command;
			command.prev = this.queueTail;
			this.queueTail = command;
		}
		this.checkQueue();
	}
	,send: function(command) {
		haxe_Log.trace("send to debugger cli: " + command + "\n",{ fileName : "CLIAdapter.hx", lineNumber : 112, className : "vshaxeDebug.CLIAdapter", methodName : "send"});
		try {
			this.proc.stdin.write("" + command + "\n");
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,Error) ) {
				throw new js__$Boot_HaxeError(this.onError(e));
			} else throw(e);
		}
	}
	,checkQueue: function() {
		if(this.currentCommand == null && this.queueHead != null) {
			this.currentCommand = this.queueHead;
			this.queueHead = this.currentCommand.next;
			this.executeCurrentCommand();
		}
	}
	,executeCurrentCommand: function() {
		this.currentCommand.execute($bind(this,this.send));
		if(this.currentCommand.done) {
			this.removeCurrentCommand();
		}
	}
	,removeCurrentCommand: function() {
		this.currentCommand = null;
		this.checkQueue();
	}
	,removeCommand: function(command) {
		if(command == this.queueHead) {
			this.queueHead = command.next;
		}
		if(command == this.queueTail) {
			this.queueTail = command.prev;
		}
		if(command.prev != null) {
			command.prev.next = command.next;
		}
		if(command.next != null) {
			command.next.prev = command.prev;
		}
	}
	,onData: function(buf) {
		var newLength = this.buffer.length + buf.length;
		this.buffer = js_node_buffer_Buffer.concat([this.buffer,buf],newLength);
		var rawInput = this.buffer.toString();
		if(this.parser.isPromptMatched(rawInput)) {
			this.buffer = new js_node_buffer_Buffer(0);
			var lines = this.parser.getLinesExceptPrompt(rawInput);
			if(this.currentCommand != null) {
				this.currentCommand.processResult(lines);
				if(this.currentCommand.done) {
					this.removeCurrentCommand();
				}
			}
			this.onPromptGot(lines);
		}
		if(this.allOutputReceiver(rawInput)) {
			this.buffer = new js_node_buffer_Buffer(0);
		}
	}
	,__class__: vshaxeDebug_CLIAdapter
};
var vshaxeDebug_CommandsBatch = function($debugger,callback) {
	this["debugger"] = $debugger;
	this.callback = callback;
	this.waiting = this.got = 0;
};
vshaxeDebug_CommandsBatch.__name__ = true;
vshaxeDebug_CommandsBatch.prototype = {
	add: function(command,callback) {
		if(callback != null) {
			this.waiting++;
		}
		this["debugger"].queueSend(command,this.wrap(callback));
	}
	,onResponse: function() {
		this.got++;
		this.checkIsDone();
	}
	,checkIsDone: function() {
		if(this.waiting == this.got) {
			this.callback();
		}
	}
	,wrap: function(callback) {
		var _gthis = this;
		var wrapper = callback;
		if(callback != null) {
			wrapper = function(output) {
				var result = callback(output);
				if(result) {
					_gthis.got++;
					_gthis.checkIsDone();
				}
				return result;
			};
		}
		return wrapper;
	}
	,__class__: vshaxeDebug_CommandsBatch
};
var vshaxeDebug_Context = function(protocol,$debugger,pathProvider) {
	this.protocol = protocol;
	this["debugger"] = $debugger;
	this.pathProvider = pathProvider;
	this.debuggerState = vshaxeDebug_EDebuggerState.WaitingGreeting;
	this.breakpoints = new haxe_ds_StringMap();
	this.variableHandles = new adapter_Handles();
	this.knownObjects = new haxe_ds_IntMap();
};
vshaxeDebug_Context.__name__ = true;
vshaxeDebug_Context.prototype = {
	onEvent: function(event) {
		this.debuggerState = vshaxeDebug_StateController.onEvent(this,event);
	}
	,sendToOutput: function(output,category) {
		if(category == null) {
			category = "console";
		}
		this.protocol.sendEvent(new adapter_OutputEvent(output + "\n",category));
	}
	,sendError: function(response,message) {
		response.success = false;
		response.message = message;
		this.protocol.sendResponse(response);
	}
	,__class__: vshaxeDebug_Context
};
var vshaxeDebug_EDebuggerState = { __ename__ : true, __constructs__ : ["WaitingGreeting","Configuring","Running","Stopped"] };
vshaxeDebug_EDebuggerState.WaitingGreeting = ["WaitingGreeting",0];
vshaxeDebug_EDebuggerState.WaitingGreeting.toString = $estr;
vshaxeDebug_EDebuggerState.WaitingGreeting.__enum__ = vshaxeDebug_EDebuggerState;
vshaxeDebug_EDebuggerState.Configuring = ["Configuring",1];
vshaxeDebug_EDebuggerState.Configuring.toString = $estr;
vshaxeDebug_EDebuggerState.Configuring.__enum__ = vshaxeDebug_EDebuggerState;
vshaxeDebug_EDebuggerState.Running = ["Running",2];
vshaxeDebug_EDebuggerState.Running.toString = $estr;
vshaxeDebug_EDebuggerState.Running.__enum__ = vshaxeDebug_EDebuggerState;
vshaxeDebug_EDebuggerState.Stopped = function(frames,currentFrame) { var $x = ["Stopped",3,frames,currentFrame]; $x.__enum__ = vshaxeDebug_EDebuggerState; $x.toString = $estr; return $x; };
var vshaxeDebug_EStateControlEvent = { __ename__ : true, __constructs__ : ["GreetingReceived","Continue","Stop","FrameUp","FrameDown","SetFrames"] };
vshaxeDebug_EStateControlEvent.GreetingReceived = ["GreetingReceived",0];
vshaxeDebug_EStateControlEvent.GreetingReceived.toString = $estr;
vshaxeDebug_EStateControlEvent.GreetingReceived.__enum__ = vshaxeDebug_EStateControlEvent;
vshaxeDebug_EStateControlEvent.Continue = ["Continue",1];
vshaxeDebug_EStateControlEvent.Continue.toString = $estr;
vshaxeDebug_EStateControlEvent.Continue.__enum__ = vshaxeDebug_EStateControlEvent;
vshaxeDebug_EStateControlEvent.Stop = function(reason) { var $x = ["Stop",2,reason]; $x.__enum__ = vshaxeDebug_EStateControlEvent; $x.toString = $estr; return $x; };
vshaxeDebug_EStateControlEvent.FrameUp = ["FrameUp",3];
vshaxeDebug_EStateControlEvent.FrameUp.toString = $estr;
vshaxeDebug_EStateControlEvent.FrameUp.__enum__ = vshaxeDebug_EStateControlEvent;
vshaxeDebug_EStateControlEvent.FrameDown = ["FrameDown",4];
vshaxeDebug_EStateControlEvent.FrameDown.toString = $estr;
vshaxeDebug_EStateControlEvent.FrameDown.__enum__ = vshaxeDebug_EStateControlEvent;
vshaxeDebug_EStateControlEvent.SetFrames = function(frames) { var $x = ["SetFrames",5,frames]; $x.__enum__ = vshaxeDebug_EStateControlEvent; $x.toString = $estr; return $x; };
var vshaxeDebug_StateController = function() { };
vshaxeDebug_StateController.__name__ = true;
vshaxeDebug_StateController.onEvent = function(context,event) {
	var protocol = context.protocol;
	var currentState = context.debuggerState;
	switch(currentState[1]) {
	case 0:
		if(event[1] == 0) {
			protocol.sendEvent(new adapter_InitializedEvent());
			return vshaxeDebug_EDebuggerState.Configuring;
		} else {
			throw new js__$Boot_HaxeError("no transition: state: " + Std.string(currentState) + ", event: " + Std.string(event));
		}
		break;
	case 1:
		if(event[1] == 1) {
			return vshaxeDebug_EDebuggerState.Running;
		} else {
			throw new js__$Boot_HaxeError("no transition: state: " + Std.string(currentState) + ", event: " + Std.string(event));
		}
		break;
	case 2:
		if(event[1] == 2) {
			var reason = event[2];
			protocol.sendEvent(new adapter_StoppedEvent(reason,1));
			return vshaxeDebug_EDebuggerState.Stopped([],0);
		} else {
			throw new js__$Boot_HaxeError("no transition: state: " + Std.string(currentState) + ", event: " + Std.string(event));
		}
		break;
	case 3:
		switch(event[1]) {
		case 1:
			return vshaxeDebug_EDebuggerState.Running;
		case 3:
			var frames = currentState[2];
			var currentFrame = currentState[3];
			if(currentFrame < frames.length - 1) {
				return vshaxeDebug_EDebuggerState.Stopped(frames,currentFrame + 1);
			} else {
				throw new js__$Boot_HaxeError("no transition: state: " + Std.string(currentState) + ", event: " + Std.string(event));
			}
			break;
		case 4:
			var frames1 = currentState[2];
			var currentFrame1 = currentState[3];
			if(currentFrame1 > 0) {
				return vshaxeDebug_EDebuggerState.Stopped(frames1,currentFrame1 - 1);
			} else {
				throw new js__$Boot_HaxeError("no transition: state: " + Std.string(currentState) + ", event: " + Std.string(event));
			}
			break;
		case 5:
			var frames2 = currentState[2];
			var currentFrame2 = currentState[3];
			var newFrames = event[2];
			return vshaxeDebug_EDebuggerState.Stopped(newFrames,0);
		default:
			throw new js__$Boot_HaxeError("no transition: state: " + Std.string(currentState) + ", event: " + Std.string(event));
		}
		break;
	}
};
var vshaxeDebug_PathUtils = function() { };
vshaxeDebug_PathUtils.__name__ = true;
vshaxeDebug_PathUtils.getFileName = function(path) {
	var parts = vshaxeDebug_PathUtils.normalize(path).split("/");
	return parts.pop();
};
vshaxeDebug_PathUtils.normalize = function(path) {
	path = StringTools.replace(path,"\\","/");
	if(new EReg("^[a-zA-Z]:/","").match(path)) {
		path = "/" + path;
	}
	path = js_node_Path.normalize(path);
	path = StringTools.replace(path,"\\","/");
	return path;
};
vshaxeDebug_PathUtils.isAbsolutePath = function(path) {
	var result = false;
	if(path != "") {
		if(path.charAt(0) == "/") {
			result = true;
		}
		if(new EReg("^[a-zA-Z]:[\\\\/]","").match(path)) {
			result = true;
		}
	}
	return result;
};
vshaxeDebug_PathUtils.isOnPath = function(program) {
	if(process.platform == "win32") {
		var WHERE = "C:\\Windows\\System32\\where.exe";
		try {
			if(js_node_Fs.existsSync(WHERE)) {
				js_node_ChildProcess.execSync("" + WHERE + " " + program);
			}
			return true;
		} catch( e ) {
		}
	} else {
		var WHICH = "/usr/bin/which";
		try {
			if(js_node_Fs.existsSync(WHICH)) {
				js_node_ChildProcess.execSync("" + WHICH + " '" + program + "'");
			}
			return true;
		} catch( e1 ) {
		}
	}
	return false;
};
vshaxeDebug_PathUtils.prototype = {
	normalizeDriveLetter: function(path) {
		var regex = new EReg("^([A-Z])(:[\\\\/].*)$","");
		if(regex.match(path)) {
			var drive = regex.matched(1);
			var tail = regex.matched(2);
			path = drive.toLowerCase() + tail;
		}
		return path;
	}
	,__class__: vshaxeDebug_PathUtils
};
var vshaxeDebug_PlatformParameters = function() { };
vshaxeDebug_PlatformParameters.__name__ = true;
vshaxeDebug_PlatformParameters.getEndOfLineSign = function() {
	if(process.platform == "win32") {
		return "\r\n";
	} else {
		return "\n";
	}
};
vshaxeDebug_PlatformParameters.getPathSlashSign = function() {
	if(process.platform == "win32") {
		return "\\";
	} else {
		return "/";
	}
};
var vshaxeDebug_VariableType = { __ename__ : true, __constructs__ : ["Deep","Simple"] };
vshaxeDebug_VariableType.Deep = function(id,type) { var $x = ["Deep",0,id,type]; $x.__enum__ = vshaxeDebug_VariableType; $x.toString = $estr; return $x; };
vshaxeDebug_VariableType.Simple = function(type) { var $x = ["Simple",1,type]; $x.__enum__ = vshaxeDebug_VariableType; $x.toString = $estr; return $x; };
var vshaxeDebug_EScope = { __ename__ : true, __constructs__ : ["Locals","Global","Closure","ObjectDetails"] };
vshaxeDebug_EScope.Locals = function(frameId,type) { var $x = ["Locals",0,frameId,type]; $x.__enum__ = vshaxeDebug_EScope; $x.toString = $estr; return $x; };
vshaxeDebug_EScope.Global = function(frameId) { var $x = ["Global",1,frameId]; $x.__enum__ = vshaxeDebug_EScope; $x.toString = $estr; return $x; };
vshaxeDebug_EScope.Closure = function(frameId) { var $x = ["Closure",2,frameId]; $x.__enum__ = vshaxeDebug_EScope; $x.toString = $estr; return $x; };
vshaxeDebug_EScope.ObjectDetails = function(id,name,type) { var $x = ["ObjectDetails",3,id,name,type]; $x.__enum__ = vshaxeDebug_EScope; $x.toString = $estr; return $x; };
var vshaxeDebug_commands_Evaluate = function(context,response,args) {
	vshaxeDebug_commands_BaseCommand.call(this,context,response,args);
};
vshaxeDebug_commands_Evaluate.__name__ = true;
vshaxeDebug_commands_Evaluate.__super__ = vshaxeDebug_commands_BaseCommand;
vshaxeDebug_commands_Evaluate.prototype = $extend(vshaxeDebug_commands_BaseCommand.prototype,{
	execute: function() {
		var preparedExpression = this.prepareExpression(this.args.expression);
		var command = this.cmd.evaluate(preparedExpression);
		this["debugger"].queueSend(command,$bind(this,this.processResult));
	}
	,processResult: function(lines) {
		var exprResult = this.parser.parseEvaluate(lines);
		this.response.body = { result : "could not be evaluated", variablesReference : 0};
		if(exprResult[1] == 0) {
			var v = exprResult[2];
			var _g = v.type;
			if(_g[1] == 0) {
				var type = _g[3];
				var id = _g[2];
				var vRef = this.context.variableHandles.create("object_" + id);
				this.response.body.variablesReference = vRef;
			}
			this.response.body.result = v.value;
		}
		this.context.protocol.sendResponse(this.response);
		return true;
	}
	,prepareExpression: function(raw) {
		var dotStarts = new EReg("^\\..*","");
		var colonStarts = new EReg("^:.*","");
		if(dotStarts.match(raw)) {
			return "this" + raw;
		} else if(colonStarts.match(raw)) {
			return "";
		}
		return raw;
	}
	,__class__: vshaxeDebug_commands_Evaluate
});
var vshaxeDebug_commands_SetBreakpoints = function(context,response,args) {
	vshaxeDebug_commands_BaseCommand.call(this,context,response,args);
};
vshaxeDebug_commands_SetBreakpoints.__name__ = true;
vshaxeDebug_commands_SetBreakpoints.__super__ = vshaxeDebug_commands_BaseCommand;
vshaxeDebug_commands_SetBreakpoints.prototype = $extend(vshaxeDebug_commands_BaseCommand.prototype,{
	execute: function() {
		this.result = [];
		if(this.args.source.name == null) {
			this.args.source.name = haxe_io_Path.withoutDirectory(this.args.source.path);
		}
		var source = new adapter_Source(this.args.source.name,this.args.source.path);
		haxe_Log.trace("Args: " + Std.string(this.args),{ fileName : "SetBreakpoints.hx", lineNumber : 22, className : "vshaxeDebug.commands.SetBreakpoints", methodName : "execute"});
		var pathKey = this.getKey(this.args.source.path);
		var _this = this.context.breakpoints;
		if(!(__map_reserved[pathKey] != null ? _this.existsReserved(pathKey) : _this.h.hasOwnProperty(pathKey))) {
			var _this1 = this.context.breakpoints;
			var value = [];
			if(__map_reserved[pathKey] != null) {
				_this1.setReserved(pathKey,value);
			} else {
				_this1.h[pathKey] = value;
			}
		}
		var _this2 = this.context.breakpoints;
		var breakpoints = __map_reserved[pathKey] != null ? _this2.getReserved(pathKey) : _this2.h[pathKey];
		var previouslySet = this.getAlreadySetMap(pathKey,this.context.breakpoints);
		var f = $bind(this,this.commandDoneCallback);
		var path = pathKey;
		var response = this.response;
		var batch = function() {
			f(path,response);
		};
		var batch1 = new vshaxeDebug_CommandsBatch(this.context["debugger"],batch);
		var _g = this.context.debuggerState;
		if(_g[1] == 2) {
			batch1.add(this.cmd.pause(),function(_) {
				return true;
			});
		}
		var _g1 = 0;
		var _g2 = this.args.breakpoints;
		while(_g1 < _g2.length) {
			var b = _g2[_g1];
			++_g1;
			if(previouslySet.h.hasOwnProperty(b.line)) {
				previouslySet.remove(b.line);
			} else {
				var breakpoint = new adapter_Breakpoint(true,b.line,0,source);
				var path1 = this.context.pathProvider.forBreakpointSetting(this.args.source.name);
				var cmd = this.cmd.addBreakpoint(path1,b.line);
				batch1.add(cmd,(function(container,breakpoint1,f1) {
					return function(lines) {
						return f1[0](breakpoint1[0],container[0],lines);
					};
				})([breakpoints],[breakpoint],[$bind(this,this.onBreakpointAdded)]));
			}
		}
		var b1 = previouslySet.iterator();
		while(b1.hasNext()) {
			var b2 = b1.next();
			var path2 = this.context.pathProvider.forBreakpointSetting(this.args.source.name);
			var cmd1 = this.cmd.removeBreakpoint(path2,b2.line);
			batch1.add(cmd1,(function(container1,breakpoint2,f2) {
				return function(lines1) {
					return f2[0](breakpoint2[0],container1[0],lines1);
				};
			})([breakpoints],[b2],[$bind(this,this.onBreakpointRemoved)]));
		}
		var _g11 = this.context.debuggerState;
		if(_g11[1] == 2) {
			batch1.add(this.cmd.continueCommand());
		}
		batch1.checkIsDone();
	}
	,onBreakpointAdded: function(breakpoint,container,lines) {
		var info = this.parser.parseAddBreakpoint(lines);
		if(info[1] == 0) {
			var bInfo = info[2];
			breakpoint.id = bInfo.id;
			var _g = bInfo.lineInfo;
			if(_g[1] == 0) {
				var line = _g[2];
				breakpoint.line = line;
			}
			container.push(breakpoint);
		} else {
			this.context.sendError(this.response,"AddBreakpoint FAILED: [ " + Std.string(lines) + " ]");
		}
		return true;
	}
	,onBreakpointRemoved: function(breakpoint,container,lines) {
		HxOverrides.remove(container,breakpoint);
		return true;
	}
	,commandDoneCallback: function(path,response) {
		var _this = this.context.breakpoints;
		var breakpoints = __map_reserved[path] != null ? _this.getReserved(path) : _this.h[path];
		var _g = [];
		var _g1 = 0;
		while(_g1 < breakpoints.length) {
			var b = breakpoints[_g1];
			++_g1;
			if(b.id > 0) {
				_g.push(b);
			}
		}
		var validated = _g;
		var _this1 = this.context.breakpoints;
		if(__map_reserved[path] != null) {
			_this1.setReserved(path,validated);
		} else {
			_this1.h[path] = validated;
		}
		response.success = true;
		response.body = { breakpoints : validated};
		this.context.protocol.sendResponse(response);
	}
	,getAlreadySetMap: function(path,breakpoints) {
		var res = new haxe_ds_IntMap();
		if(__map_reserved[path] != null ? breakpoints.existsReserved(path) : breakpoints.h.hasOwnProperty(path)) {
			var addedForThisPath = __map_reserved[path] != null ? breakpoints.getReserved(path) : breakpoints.h[path];
			var _g = 0;
			while(_g < addedForThisPath.length) {
				var b = addedForThisPath[_g];
				++_g;
				res.h[b.line] = b;
			}
		}
		return res;
	}
	,getKey: function(path) {
		var res = vshaxeDebug_PathUtils.normalize(path);
		return res;
	}
	,__class__: vshaxeDebug_commands_SetBreakpoints
});
var vshaxeDebug_commands_StackTrace = function(context,response,args) {
	vshaxeDebug_commands_BaseCommand.call(this,context,response,args);
};
vshaxeDebug_commands_StackTrace.__name__ = true;
vshaxeDebug_commands_StackTrace.__super__ = vshaxeDebug_commands_BaseCommand;
vshaxeDebug_commands_StackTrace.prototype = $extend(vshaxeDebug_commands_BaseCommand.prototype,{
	execute: function() {
		this["debugger"].queueSend(this.cmd.stackTrace(),$bind(this,this.processResult));
	}
	,processResult: function(lines) {
		var frames = this.parser.parseStackTrace(lines,$bind(this,this.pathProvider));
		this.response.body = { stackFrames : frames};
		this.context.onEvent(vshaxeDebug_EStateControlEvent.SetFrames(frames));
		this.context.protocol.sendResponse(this.response);
		return true;
	}
	,pathProvider: function(fileName) {
		return this.context.pathProvider.forEditor(fileName);
	}
	,__class__: vshaxeDebug_commands_StackTrace
});
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
var __map_reserved = {};
hxcppAdapter_commands_Variables.increment = 0;
js_Boot.__toStr = ({ }).toString;
hxcppAdapter_Adapter.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
